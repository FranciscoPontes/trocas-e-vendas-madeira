[{"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\index.js":"1","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\App.js":"2","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\ReduxStore\\reducer.js":"3","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\NavBar\\NavBar.js":"4","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\HomePage\\HomePage.js":"5","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\NovaVenda\\NovaVenda.js":"6","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\MySells\\MySells.js":"7","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\ReduxStore\\actionTypes.js":"8","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\Firebase\\Firebase.js":"9","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Button.js":"10","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Card\\Card.js":"11","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\TextDisplay.js":"12","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Spinner.js":"13","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Snackbar.js":"14","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\ConfirmDialog\\ConfirmDialog.js":"15","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\AlgoliaSearch\\AlgoliaSearch.js":"16","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\BulkImagePreview\\BulkImagePreview.js":"17","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\Algolia\\Algolia.js":"18","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\BoxList\\BoxList.js":"19"},{"size":760,"mtime":1609150802159,"results":"20","hashOfConfig":"21"},{"size":840,"mtime":1609171146038,"results":"22","hashOfConfig":"21"},{"size":5755,"mtime":1610448613800,"results":"23","hashOfConfig":"21"},{"size":1700,"mtime":1610379052319,"results":"24","hashOfConfig":"21"},{"size":5850,"mtime":1610378363089,"results":"25","hashOfConfig":"21"},{"size":8255,"mtime":1610368620262,"results":"26","hashOfConfig":"21"},{"size":7897,"mtime":1610368473751,"results":"27","hashOfConfig":"21"},{"size":704,"mtime":1610368037015,"results":"28","hashOfConfig":"21"},{"size":7810,"mtime":1610378232978,"results":"29","hashOfConfig":"21"},{"size":369,"mtime":1609151607210,"results":"30","hashOfConfig":"21"},{"size":6774,"mtime":1610449062927,"results":"31","hashOfConfig":"21"},{"size":467,"mtime":1610368037031,"results":"32","hashOfConfig":"21"},{"size":217,"mtime":1610368037029,"results":"33","hashOfConfig":"21"},{"size":470,"mtime":1610368037026,"results":"34","hashOfConfig":"21"},{"size":1713,"mtime":1610368037024,"results":"35","hashOfConfig":"21"},{"size":4046,"mtime":1610448816918,"results":"36","hashOfConfig":"21"},{"size":1576,"mtime":1610446838489,"results":"37","hashOfConfig":"21"},{"size":741,"mtime":1610447196993,"results":"38","hashOfConfig":"21"},{"size":867,"mtime":1609761299631,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1whupi1",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\index.js",[],["83","84"],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\App.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\ReduxStore\\reducer.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\NavBar\\NavBar.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\HomePage\\HomePage.js",["85","86","87"],"import React, { useState, useEffect } from 'react';\r\nimport Button from '../UI/Button';\r\nimport './HomePage.css';\r\nimport {connect} from 'react-redux';\r\nimport * as ReducerAPI from '../ReduxStore/reducer';\r\nimport Card from '../UI/Card/Card';\r\nimport Spinner from '../UI/Spinner';\r\nimport * as actionTypes from '../ReduxStore/actionTypes';\r\nimport TextDisplay from '../UI/TextDisplay';\r\nimport poweredByGoogle from '../images/powered_by_google_on_white.png';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport AlgoliaSearch from '../UI/AlgoliaSearch/AlgoliaSearch';\r\n\r\nconst HomePage = props => {\r\n    \r\n    const cachedCredential = sessionStorage.getItem('cp-persuasive-user');\r\n\r\n    const [ autoLoginStarted, setAutoLoginStarted ] = useState( false );\r\n\r\n    const redirect = path => {\r\n        props.history.replace(path);\r\n    }\r\n\r\n    const fetchDataOnClick = () => {   \r\n        props.initFetch();\r\n        props.fetchData(props.user.id);\r\n        props.getLikeList(props.user.id);\r\n    }\r\n\r\n    const loginButtonClick = () => props.login();\r\n\r\n    const generateSells = sells => (\r\n            <React.Fragment>\r\n                <div className=\"sells-content\"> \r\n                    { Object.keys(sells).map( ( sell, index )  => {\r\n                        if ( index  > 4 ) return null;\r\n                        return <Card key={sells[sell].docId} docData={sells[sell]} value={sells[sell].docId}/>;\r\n                     }) }\r\n                </div>\r\n                <hr className=\"horizontal-break\" />\r\n                <TextDisplay text=\"Mais publicações\" headingType=\"h5\" className=\"\"/>\r\n                <div className=\"sells-content\"> \r\n                    { Object.keys(sells).map( ( sell, index )  => {\r\n                        if ( index  <= 4 ) return null;\r\n                        return <Card key={sells[sell].docId} docData={sells[sell]} value={sells[sell].docId}/>;\r\n                     }) }\r\n                </div>\r\n                <div className=\"sells-content\">\r\n                    <AddIcon onClick={ fetchDataOnClick } fontSize=\"large\" className=\"load-more-icon\"/>\r\n                </div>\r\n            </React.Fragment>\r\n            );\r\n    \r\n    const informativeText = () => {\r\n        return (\r\n            <React.Fragment>\r\n                Nesta plataforma pode colocar anúncios de vendas dos seus produtos,\r\n                bem como ver anúncios de outras pessoas. O processo de venda ocorre externamente pela responsabilidades dos utilizadores.\r\n                <br/> <b>Dica de uso:</b> A qualquer momento pode clicar na bandeira do canto superior esquerdo para voltar à página inicial.\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    useEffect( () => {\r\n        if ( cachedCredential && !props.user ) loginButtonClick();\r\n        else if ( !cachedCredential && !props.user && sessionStorage.getItem('login-init') === 'true' ) {\r\n            props.login( true );\r\n            setAutoLoginStarted( true );\r\n        }\r\n        else if ( autoLoginStarted && props.user ) setAutoLoginStarted( false );\r\n    } )\r\n\r\n    useEffect( () => {\r\n        if ( !props.user ) return;\r\n        if ( props.user === 'ERROR' ) cachedCredential = false;\r\n        props.initFetch();\r\n        props.fetchData(props.user.id, true);\r\n        props.getLikeList(props.user.id);\r\n\r\n    }, [ props.user ] );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"homepage-content\">\r\n                { !props.fetchDone || ( cachedCredential  && !props.user ) || autoLoginStarted ? <Spinner /> : null}\r\n                \r\n                    { !props.user  ? \r\n                    <React.Fragment> \r\n                        <div className=\"homepage-buttons\">\r\n                            <div className=\"login-display\">\r\n                                { !cachedCredential && !autoLoginStarted ? \r\n                                    <Button color=\"primary\" text=\"Login\" className=\"buttons login\"  click={loginButtonClick} />\r\n                                    : null }\r\n                                <img src={poweredByGoogle} width=\"25px\" alt=\"poweredByGoogle\"/>\r\n                            </div>\r\n                        </div> \r\n                        <TextDisplay text={informativeText()} headingType=\"h6\"/>\r\n                    </React.Fragment>\r\n                    : <React.Fragment>\r\n                        <div className=\"homepage-buttons\">\r\n                            <Button text=\"Vender\" className=\"buttons blue\" click={ () => redirect(\"/nova-venda\")}/>\r\n                            <Button text=\"Minha área\" className=\"buttons yellow\" click={ () => redirect(\"/minhas-vendas\")}/>   \r\n                        </div>\r\n                        <AlgoliaSearch />\r\n                     </React.Fragment>\r\n                    }\r\n                \r\n                { props.otherSells && props.user && !props.searching ? \r\n                <React.Fragment>\r\n                    <TextDisplay text=\"Publicações mais curtidas\" headingType=\"h5\"/>\r\n                    { props.fetchDone ? generateSells( props.otherSells ) : null }\r\n                    </React.Fragment> \r\n                : null }\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.user,\r\n        otherSells: state.otherSells,\r\n        fetchDone: state.fetchDone,\r\n        searching: state.searching\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        login: value => dispatch(ReducerAPI.tryLogin(value)),\r\n        initFetch: () => dispatch({type: actionTypes.START_FETCH}),\r\n        fetchData: (uId, limit = false) => dispatch(ReducerAPI.fetchOtherSells(uId, limit)),\r\n        getLikeList: (uId) => dispatch(ReducerAPI.getUserLikeList(uId))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(HomePage);\r\n\r\n\r\n","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\NovaVenda\\NovaVenda.js",["88","89"],"import React, {useState, useEffect} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport './NovaVenda.scss';\r\nimport CustomButton from '../UI/Button';\r\nimport * as reducerAPI from '..//ReduxStore/reducer';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport {connect} from 'react-redux';\r\nimport ImagePreview from '../UI/BulkImagePreview/BulkImagePreview';\r\nimport Spinner from '../UI/Spinner';\r\nimport $ from 'jquery';\r\nimport TextDisplay from '../UI/TextDisplay';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport Button from '@material-ui/core/Button';\r\nimport ConfirmDialog from '../UI/ConfirmDialog/ConfirmDialog';\r\nimport * as actionTypes from '../ReduxStore/actionTypes';\r\n\r\nconst NovaVenda = props => {\r\n\r\n    const [input, setInput] = useState({\r\n                            title: \"\",\r\n                            description: \"\",\r\n                            price: \"\",\r\n                            images: null,\r\n                            phone_number: \"\",\r\n                            email: props.email,\r\n                            date: new Date().toISOString().slice(0, 10),\r\n                            profile_photo: props.photo,\r\n                            owner: props.userName,\r\n                            complete: \"false\",\r\n                            likeCount: 0,\r\n                            userId: props.userId\r\n                            });\r\n    \r\n    // images for preview\r\n    const [images, setImages] = useState(null);                        \r\n\r\n    const [createButtonClicked, setCreateButtonClicked] = useState( false );\r\n\r\n    const [ alertDialogSettings, setAlertDialogSettings ] = useState( {\r\n        title: null,\r\n        description: null,\r\n        show: false,\r\n        disableBackdrop: false\r\n    });\r\n\r\n    const [ alertOkClicked, setAlertOkClicked ] = useState( false );\r\n\r\n    const postNewSell = () => {\r\n        var data = input;\r\n        if (data.price <= 0 || data.images === null) {\r\n            if (data.title === \"\") { \r\n                setAlertDialogSettings( {\r\n                    title: \"Adicione um título!\",\r\n                    description: null,\r\n                    show: true\r\n                })\r\n                return; \r\n            }\r\n            if (data.price <= 0) { \r\n                setAlertDialogSettings( {\r\n                    title: \"Preço não é válido!\",\r\n                    description: \"O preço tem de ser superior a 0.\",\r\n                    show: true\r\n                })\r\n                return; \r\n            }\r\n            if (data.images === null) { \r\n                setAlertDialogSettings( {\r\n                    title: \"Adicione pelo menos uma imagem!\",\r\n                    description: null,\r\n                    show: true\r\n                })\r\n                return; \r\n            }\r\n            setInput({\r\n                ...input,\r\n                price: 0\r\n            })\r\n            return;\r\n        }\r\n        props.uploadNewSell( data) ;\r\n        setCreateButtonClicked( true );\r\n    }\r\n\r\n    const handleImagesChange = ( value, targetValue ) => {\r\n        if ( value.length > 5 ) {\r\n            targetValue = null;\r\n            setAlertDialogSettings( {\r\n                title: \"Só pode adicionar no máximo 5 imagens!\",\r\n                description: null,\r\n                show: true\r\n            })\r\n            $(\"input#images\").val(\"\");\r\n            setImages(null); \r\n            setInput({\r\n                ...input,\r\n                images: null\r\n            });\r\n            return;\r\n        }\r\n        let newImageState = [];\r\n        let images = [];\r\n        for (let image in value) {\r\n            if ( image === 'length' ) break;\r\n            newImageState.push(URL.createObjectURL( value[image]  ) );\r\n            images.push( value[image] );\r\n        }\r\n        setImages(newImageState); \r\n        setInput({\r\n            ...input,\r\n            images: images\r\n        });\r\n    }\r\n\r\n    useEffect( () => {\r\n        if ( props.searching ) props.toggleSearch();\r\n    }, [] )\r\n\r\n    useEffect( () => {\r\n        if (createButtonClicked && props.uploadDone) {\r\n            setAlertDialogSettings( {\r\n                title: \"Troca criada!\",\r\n                description: null,\r\n                show: true,\r\n                disableBackdrop: true\r\n            })\r\n        }\r\n    }, [createButtonClicked, props.uploadDone]);\r\n\r\n    useEffect( () => {\r\n        if ( createButtonClicked && alertOkClicked) props.history.push(\"/\");\r\n        else if ( alertOkClicked ) {\r\n            setAlertDialogSettings( {\r\n                title: null,\r\n                description: null,\r\n                show: false\r\n            })\r\n            setAlertOkClicked( false );\r\n        }\r\n    }, [createButtonClicked, alertOkClicked ] )\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"heading\">\r\n                <TextDisplay text=\"Nova venda\" headingType=\"h5\"/>\r\n            </div>\r\n            <form className=\"new-sell\" noValidate autoComplete=\"off\">\r\n                <TextField id=\"title\" label=\"Titulo da venda\" variant=\"outlined\" className=\"input\" onChange={(event) => setInput({...input,title: event.target.value})}/>\r\n                <TextField id=\"preco\" label=\"Preço\" variant=\"outlined\" className=\"input\" type=\"number\" value={input.price} onChange={(event) => setInput({...input,price: event.target.value})}\r\n                    InputProps={{\r\n                    startAdornment: <InputAdornment position=\"start\">€</InputAdornment>,\r\n                    }}\r\n                />\r\n                <TextField id=\"description\" label=\"Descrição (opcional)\" variant=\"outlined\" className=\"input\" multiline rows={7} onChange={(event) => setInput({...input,description: event.target.value})}/>\r\n                <TextField id=\"phone_number\" label=\"Contacto (opcional)\" variant=\"outlined\" className=\"input\" onChange={(event) => setInput({...input,phone_number: event.target.value})}/>\r\n                <TextField id=\"email\" label=\"Email\" variant=\"outlined\" className=\"input\" onChange={(event) => setInput({...input,email: event.target.value})} value={input.email} />\r\n                \r\n                <input accept=\"image/*\" id=\"contained-button-file\" type=\"file\" multiple onChange={(event) => handleImagesChange(event.target.files, event.target.value)} />\r\n                <label htmlFor=\"contained-button-file\" className=\"upload-container\">\r\n                    <Button variant=\"contained\" color=\"primary\" component=\"span\" className=\"upload-button\">\r\n                        <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\" className=\"upload-photo-icon\">\r\n                            <PhotoCamera />\r\n                        </IconButton>\r\n                        Upload\r\n                    </Button>\r\n                </label>\r\n                { images ? <ImagePreview bulkImages={images} /> : null }\r\n                { !props.uploadDone ? <Spinner className=\"spinner-my-sells\"/> : <CustomButton color=\"primary\" className=\"new-sell-button\" text=\"Criar\" click={postNewSell}/> }\r\n            </form>\r\n            <ConfirmDialog alert disableEscapeKeyDown={alertDialogSettings.disableBackdrop} disableBackdropClick={alertDialogSettings.disableBackdrop} \r\n                        title={alertDialogSettings.title} description={alertDialogSettings.description} \r\n                        open={alertDialogSettings.show} click={ () => setAlertOkClicked( true ) } \r\n                        onClose={ () => setAlertDialogSettings( {...alertDialogSettings, show: false} ) } />\r\n        </React.Fragment>\r\n    );\r\n}        \r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        userId: state.user.id,\r\n        email: state.user.email,\r\n        photo: state.user.photo,\r\n        userName: state.user.name,\r\n        uploadDone: state.uploadDone,\r\n        searching: state.searching\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        uploadNewSell: data => dispatch( reducerAPI.uploadNewSell( data ) ),\r\n        toggleSearch: () => dispatch( { type: actionTypes.TOGGLE_SEARCH } )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NovaVenda);\r\n","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\MySells\\MySells.js",["90","91"],"import React, { useState, useEffect } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as ReducerAPI from '../ReduxStore/reducer';\r\nimport * as actionTypes from '../ReduxStore/actionTypes';\r\nimport './MySells.scss';\r\nimport Spinner from '../UI/Spinner';\r\nimport Card from '../UI/Card/Card';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport ConfirmDialog from '../UI/ConfirmDialog/ConfirmDialog';\r\nimport TextDisplay from '../UI/TextDisplay';\r\nimport SnackBar from '../UI/Snackbar';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\nconst MySells = props => {\r\n\r\n    const [ showComplete, setShowComplete ] = useState(false);\r\n    \r\n    const [ currentTab, setCurrentTab ] = useState(0);\r\n\r\n    const [ showDeleteConfirmDialog, setShowDeleteConfirmDialog ] = useState( false );\r\n\r\n    const [ showUpdateConfirmDialog, setShowUpdateConfirmDialog ] = useState( false );\r\n\r\n    const [ docIdToDelete, setDocIdToDelete ] = useState( null );\r\n\r\n    const [ docIdToUpdate, setDocIdToUpdate ] = useState( null );\r\n\r\n    const [ showSnackBar, setShowSnackBar ] = useState( { message: null, show: false } );\r\n\r\n    const confirmDeleteCurrentEntry = docId => { \r\n        setDocIdToDelete( docId );\r\n        setShowDeleteConfirmDialog( true );\r\n    }\r\n\r\n    const deleteCurrentEntry = value => {\r\n        if ( value ) { \r\n            props.deleteSell(docIdToDelete, props.sells);\r\n            setShowSnackBar( {\r\n                message: 'Venda apagada!',\r\n                show: true\r\n            });\r\n        }\r\n        setDocIdToDelete( null );\r\n        setShowDeleteConfirmDialog( false );\r\n    }\r\n\r\n    const confirmUpdateDocData = docId => {\r\n        setDocIdToUpdate( docId );\r\n        setShowUpdateConfirmDialog( true );\r\n    }\r\n\r\n    const updateDocData = value => {\r\n        if ( value ) {\r\n            let data = {...props.sells[ docIdToUpdate ]};\r\n            data[\"complete\"] = \"true\";\r\n            data[\"completionDate\"] = new Date().toISOString().slice(0, 10);\r\n            props.updateData( docIdToUpdate, data );\r\n            setShowSnackBar( {\r\n                message: 'A venda foi completa!',\r\n                show: true\r\n            });\r\n        }\r\n        setDocIdToUpdate( null );\r\n        setShowUpdateConfirmDialog( false );\r\n    }\r\n\r\n    const generateSellDisplays = sells => (\r\n        <div className=\"sells-content\"> \r\n            { Object.keys(sells).map( key => {\r\n                if ( sells[key].complete === 'true' && !showComplete ) return null;\r\n                return <Card key={sells[key].docId} docData={sells[key]} value={sells[key].docId}\r\n                                                        canDelete={confirmDeleteCurrentEntry}\r\n                                                        completeSell={confirmUpdateDocData}\r\n                                                        location={props.location.pathname}/>\r\n                }\r\n            ) }\r\n        </div>\r\n    );\r\n\r\n    const displayedCardNumber = sells => {\r\n        if ( !sells || ( Object.keys(sells).length === 0 && sells.constructor === Object ) ) return 0;\r\n        return Object.keys(sells).reduce( (acc, sell) => {\r\n            if ( sells[sell].complete === 'true' && !showComplete ) return acc;\r\n            return acc + 1;\r\n        }, 0 )\r\n    }\r\n\r\n    const fetchLikedSells = () => {\r\n        props.startFetch();\r\n        props.getLikedSells( props.userLikes );\r\n    }\r\n\r\n    const generateLikedSells = sells => (\r\n        <div className=\"sells-content\"> \r\n            { Object.keys(sells).map( key =>  <Card key={sells[key].docId} docData={sells[key]} value={sells[key].docId}/>) }\r\n        </div>\r\n    );\r\n\r\n    const handleSnackbarClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n    \r\n        setShowSnackBar( false );\r\n      };\r\n\r\n    useEffect( () => {\r\n        if ( props.searching ) props.toggleSearch();\r\n    }, [] )\r\n\r\n    useEffect( () => {\r\n        if ( currentTab === 0) {\r\n            props.startFetch();\r\n            props.getSellsData(props.user.id);\r\n            return;\r\n        }\r\n        fetchLikedSells();\r\n    }, [ currentTab, props.userLikes ] )\r\n\r\n    return (\r\n        <div className=\"my-sells\">\r\n            <div className=\"heading-display\">\r\n                { !props.fetchDone ? <Spinner /> : null }\r\n                <div className=\"text-and-switch\">\r\n                    <BottomNavigation\r\n                        value={currentTab}\r\n                        onChange={(event, newValue) => {\r\n                            setCurrentTab(newValue);\r\n                        }}\r\n                        showLabels\r\n                        className=\"mobile-nav\"\r\n                        >\r\n                        <BottomNavigationAction label=\"Minhas publicações\" icon={<FolderIcon /> } />\r\n                        <BottomNavigationAction label=\"Favoritos\" icon={<FavoriteIcon />} />\r\n                    </BottomNavigation>\r\n                    { currentTab === 0 && displayedCardNumber( props.sells ) !== 0 ? <div className=\"toggle-complete-sells\">\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Switch\r\n                                onChange={ () => setShowComplete( !showComplete ) }\r\n                                color=\"primary\"\r\n                            />\r\n                        }\r\n                        label=\"Completas\"\r\n                        className=\"switch-completas\"\r\n                    />\r\n                    </div>\r\n                    : null }\r\n                </div>\r\n                { displayedCardNumber( props.sells ) === 0 && currentTab === 0 ? <TextDisplay text=\"Não criou nenhuma publicação\" headingType=\"h6\" className=\"no-data-text-display\"/> \r\n                : displayedCardNumber( props.likedSells ) === 0 && currentTab === 1 ? <TextDisplay text=\"Não gostou de nenhuma publicação\" headingType=\"h6\" className=\"no-data-text-display\"/> : null  }\r\n            </div>\r\n            {  props.sells && props.fetchDone && currentTab === 0 ? generateSellDisplays(props.sells) : null}\r\n            {  props.likedSells && props.fetchDone && currentTab === 1 ? generateLikedSells(props.likedSells) : null}\r\n            <ConfirmDialog open={showDeleteConfirmDialog} onClose={ () => setShowDeleteConfirmDialog( false ) } click={deleteCurrentEntry} title=\"Apagar venda?\"/>\r\n            <ConfirmDialog open={showUpdateConfirmDialog} onClose={ () => setShowUpdateConfirmDialog( false ) } click={updateDocData} title=\"Completar venda?\"/>\r\n            <SnackBar open={showSnackBar.show} closeSnackbar={ handleSnackbarClose } message={showSnackBar.message} className=\"snackbar-my-sells\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.user,\r\n        sells: state.userSells,\r\n        fetchDone: state.fetchDone,\r\n        userLikes: state.userLikes,\r\n        likedSells: state.likedSells,\r\n        searching: state.searching\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        startFetch: () => dispatch({type:actionTypes.START_FETCH}),\r\n        getSellsData: (userId) => dispatch(ReducerAPI.getUserSells(userId)),\r\n        deleteSell: (docId, sells) => dispatch(ReducerAPI.deleteSell(docId, sells)),\r\n        updateData: ( docId, data)  => dispatch(ReducerAPI.updateDocData( docId, data ) ),\r\n        getLikedSells: ( likeList ) => dispatch( ReducerAPI.fetchOtherSells( null, null, likeList ) ),\r\n        toggleSearch: () => dispatch( {type: actionTypes.TOGGLE_SEARCH} )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MySells);","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\ReduxStore\\actionTypes.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\Firebase\\Firebase.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Button.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Card\\Card.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\TextDisplay.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Spinner.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Snackbar.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\ConfirmDialog\\ConfirmDialog.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\AlgoliaSearch\\AlgoliaSearch.js",["92","93"],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\BulkImagePreview\\BulkImagePreview.js",["94"],"import React, {useEffect, useState} from 'react';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport './BulkImagePreview.css';\r\nimport { connect } from 'react-redux';\r\n\r\nconst BulkImagePreview = props => {                        \r\n    \r\n    const [currentImage, setCurrentImage] = useState(props.bulkImages[0]);     \r\n    \r\n    const [currentIndex, setCurrentIndex] = useState(0);     \r\n    \r\n    const [ imageExpand, setImageExpand] = useState( false );\r\n\r\n    const changeCurrentImage = position => {\r\n        setCurrentImage(props.bulkImages[position]);\r\n        setCurrentIndex(position);\r\n    }\r\n\r\n    const chipForImages = () => {\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"preview-images\">\r\n                    <img alt=\"selected\" className={ imageExpand ? \"img-clicked\" : \"\"} src={currentImage} width=\"200px\" height=\"200px\" id=\"img-to-zoom\" onClick={ () => setImageExpand( !imageExpand ) }/>\r\n                    <div className=\"images-chips\">\r\n                        { props.bulkImages.map( ( value, index ) => <Chip label={index + 1} key={value + index} className={currentIndex === index ? \"selected-chip\" : \"chips\"} onClick={ () => changeCurrentImage(index) }/>) }\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    \r\n    return props.bulkImages ? chipForImages() : null;\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searching: state.searching,\r\n        userId: state.user.id\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(BulkImagePreview);","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\Algolia\\Algolia.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\BoxList\\BoxList.js",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":64,"column":5,"nodeType":"101","endLine":64,"endColumn":14,"suggestions":"102"},{"ruleId":"103","severity":1,"message":"104","line":75,"column":39,"nodeType":"101","messageId":"105","endLine":75,"endColumn":55},{"ruleId":"99","severity":1,"message":"106","line":75,"column":58,"nodeType":"107","endLine":75,"endColumn":63},{"ruleId":"99","severity":1,"message":"108","line":118,"column":8,"nodeType":"109","endLine":118,"endColumn":10,"suggestions":"110"},{"ruleId":"99","severity":1,"message":"111","line":141,"column":8,"nodeType":"109","endLine":141,"endColumn":46,"suggestions":"112"},{"ruleId":"99","severity":1,"message":"108","line":113,"column":8,"nodeType":"109","endLine":113,"endColumn":10,"suggestions":"113"},{"ruleId":"99","severity":1,"message":"114","line":122,"column":8,"nodeType":"109","endLine":122,"endColumn":39,"suggestions":"115"},{"ruleId":"99","severity":1,"message":"108","line":92,"column":6,"nodeType":"109","endLine":92,"endColumn":14,"suggestions":"116"},{"ruleId":"99","severity":1,"message":"117","line":95,"column":3,"nodeType":"101","endLine":95,"endColumn":12,"suggestions":"118"},{"ruleId":"119","severity":1,"message":"120","line":1,"column":16,"nodeType":"101","messageId":"121","endLine":1,"endColumn":25},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setAutoLoginStarted'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [cachedCredential, props, loginButtonClick, autoLoginStarted] as a second argument to the useEffect Hook.","Identifier",["124"],"no-const-assign","'cachedCredential' is constant.","const","Assignments to the 'cachedCredential' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["125"],"React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["126"],["127"],"React Hook useEffect has missing dependencies: 'fetchLikedSells' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["128"],["129"],"React Hook useEffect contains a call to 'setHits'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [search] as a second argument to the useEffect Hook.",["130"],"no-unused-vars","'useEffect' is defined but never used.","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"133","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},"Add dependencies array: [cachedCredential, props, loginButtonClick, autoLoginStarted]",{"range":"144","text":"145"},"Update the dependencies array to be: [props]",{"range":"146","text":"147"},"Update the dependencies array to be: [createButtonClicked, alertOkClicked, props.history]",{"range":"148","text":"149"},{"range":"150","text":"147"},"Update the dependencies array to be: [currentTab, fetchLikedSells, props, props.userLikes]",{"range":"151","text":"152"},"Update the dependencies array to be: [props, search]",{"range":"153","text":"154"},"Add dependencies array: [search]",{"range":"155","text":"156"},[3050,3050],", [cachedCredential, props, loginButtonClick, autoLoginStarted]",[4106,4108],"[props]",[4806,4844],"[createButtonClicked, alertOkClicked, props.history]",[4175,4177],[4389,4420],"[currentTab, fetchLikedSells, props, props.userLikes]",[2764,2772],"[props, search]",[2859,2859],", [search]"]