[{"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\index.js":"1","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\App.js":"2","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\ReduxStore\\reducer.js":"3","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\ReduxStore\\actionTypes.js":"4","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\Firebase\\Firebase.js":"5","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\NavBar\\NavBar.js":"6","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\MySells\\MySells.js":"7","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\NovaVenda\\NovaVenda.js":"8","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\HomePage\\HomePage.js":"9","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\Algolia\\Algolia.js":"10","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\Spinner.js":"11","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\TextDisplay.js":"12","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\Button.js":"13","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\AlgoliaSearch\\AlgoliaSearch.js":"14","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\Card\\Card.js":"15","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\BulkImagePreview\\BulkImagePreview.js":"16","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\BoxList\\BoxList.js":"17","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\ConfirmDialog\\ConfirmDialog.js":"18"},{"size":735,"mtime":1609792658495,"results":"19","hashOfConfig":"20"},{"size":840,"mtime":1609267524355,"results":"21","hashOfConfig":"20"},{"size":5632,"mtime":1610229726024,"results":"22","hashOfConfig":"20"},{"size":704,"mtime":1610069165383,"results":"23","hashOfConfig":"20"},{"size":7305,"mtime":1610229812622,"results":"24","hashOfConfig":"20"},{"size":1700,"mtime":1610235501447,"results":"25","hashOfConfig":"20"},{"size":6831,"mtime":1610244365712,"results":"26","hashOfConfig":"20"},{"size":7987,"mtime":1610241537271,"results":"27","hashOfConfig":"20"},{"size":5085,"mtime":1610238952462,"results":"28","hashOfConfig":"20"},{"size":1095,"mtime":1610157967766,"results":"29","hashOfConfig":"20"},{"size":217,"mtime":1610142173065,"results":"30","hashOfConfig":"20"},{"size":273,"mtime":1609512317907,"results":"31","hashOfConfig":"20"},{"size":369,"mtime":1609267524463,"results":"32","hashOfConfig":"20"},{"size":4227,"mtime":1610158557632,"results":"33","hashOfConfig":"20"},{"size":6260,"mtime":1610051148061,"results":"34","hashOfConfig":"20"},{"size":1369,"mtime":1610061246790,"results":"35","hashOfConfig":"20"},{"size":867,"mtime":1609520567604,"results":"36","hashOfConfig":"20"},{"size":1713,"mtime":1610240153217,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"6x0sug",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\index.js",[],["79","80"],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\App.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\ReduxStore\\reducer.js",["81"],"import * as actionTypes from './actionTypes';\r\nimport {login} from '../Firebase/Firebase';\r\nimport * as FirebaseAPI from '../Firebase/Firebase';\r\n\r\nconst initState = {\r\n    user: null,\r\n    userSells: null,\r\n    otherSells: null,\r\n    fetchDone: true,\r\n    userLikes: null,\r\n    uploadDone: true,\r\n    searching: false,\r\n    likedSells: null\r\n}\r\n\r\nexport const tryLogin = ( redirected = false ) => {\r\n    return dispatch => { \r\n            FirebaseAPI.login( redirected ).then( response => { \r\n            dispatch({type: actionTypes.LOGIN_USER, data: response});                \r\n            })\r\n            .catch( error => console.error(error) )\r\n    } \r\n}\r\n\r\nexport const logout = () => dispatch => FirebaseAPI.logout().then( () => dispatch( {type: actionTypes.LOGOUT_USER} ) ).catch( error => console.error(error) );\r\n\r\nexport const getUserSells =  uId => async dispatch => { \r\n        await FirebaseAPI.fetchUserData(uId)\r\n            .then( response => dispatch({type: actionTypes.GET_USER_SELLS, data: response} ) )\r\n            .catch( error => console.error(error) );\r\n}\r\n\r\nexport const deleteSell = ( docId, sells ) => {\r\n    return dispatch => {\r\n            FirebaseAPI.deleteDocument( docId ).then( () => {\r\n            let currentData = {...sells};\r\n            delete currentData[docId];\r\n            return dispatch({type: actionTypes.DELETE_SELL, data: currentData})\r\n            \r\n            })\r\n    }\r\n}\r\n\r\nexport const fetchOtherSells = ( uId, limit, likeList ) => {\r\n    return dispatch => {\r\n        if ( !likeList ) FirebaseAPI.fetchAllData(uId, limit, likeList).then( response => dispatch({type: actionTypes.FETCH_OTHER_SELLS, data: response}) ).catch( error => console.error(error) );\r\n        else FirebaseAPI.fetchAllData(uId, limit, likeList).then( response => dispatch({type: actionTypes.FETCH_LIKED_SELLS, data: response}) ).catch( error => console.error(error) );\r\n    }\r\n}\r\n\r\nexport const updateDocData = ( docId, data ) => dispatch => FirebaseAPI.updateDocumentData( docId, data ).then( () => dispatch({type: actionTypes.UPDATE_DATA, data: data, key: docId}) )\r\n\r\nexport const updateLikeCount = (uId, docId, data, likeList) => {\r\n    return async dispatch => {\r\n        // update doc like count\r\n        await FirebaseAPI.updateDocumentData(docId, data).then( () => dispatch({type: actionTypes.UPDATE_DOC_LIKES, data: data, key: docId}) ).catch( error => console.error( error ) );\r\n        // update user like list\r\n        await FirebaseAPI.addDocument(\"user_data\", uId, likeList).then( () => dispatch({type: actionTypes.UPDATE_USER_LIKES, data: likeList}) ).catch( error => console.error( error ) );\r\n    }\r\n}\r\n\r\nexport const getUserLikeList = uId => dispatch => FirebaseAPI.getUserData( uId ).then( response => dispatch({type: actionTypes.FETCH_USER_LIKE_LIST, data: response.data() }) ).catch( error => console.error( error) );\r\n\r\nexport const uploadNewSell = data => async dispatch => {\r\n    dispatch({type: actionTypes.NEW_UPLOAD_STARTED });\r\n    await FirebaseAPI.postData( data ).then().catch( error => console.error( error) );\r\n    dispatch({type: actionTypes.NEW_UPLOAD_FINISHED });\r\n}\r\n\r\nconst reducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.LOGIN_USER: \r\n            return {\r\n                ...state,\r\n                user: action.data\r\n            };\r\n        case actionTypes.LOGOUT_USER: \r\n            return {\r\n                ...state,\r\n                user: null\r\n            };\r\n        case actionTypes.GET_USER_SELLS: \r\n            return {\r\n                ...state,\r\n                userSells: action.data,\r\n                fetchDone: true\r\n            };\r\n        case actionTypes.DELETE_SELL: \r\n            return {\r\n                ...state,\r\n                userSells: action.data\r\n            }\r\n        case actionTypes.START_FETCH: \r\n            return {\r\n                ...state,\r\n                fetchDone: false\r\n            }\r\n        case actionTypes.FETCH_OTHER_SELLS:\r\n            return {\r\n                ...state,\r\n                otherSells: action.data,\r\n                fetchDone: true\r\n            }\r\n        case actionTypes.UPDATE_DATA: \r\n            return {\r\n                ...state,\r\n                userSells: {\r\n                    ...state.userSells,\r\n                    [action.key]: action.data\r\n                }\r\n            }\r\n        case actionTypes.UPDATE_DOC_LIKES: \r\n            return {\r\n                ...state,\r\n                otherSells: {\r\n                    ...state.otherSells,\r\n                    [action.key]: action.data\r\n                }\r\n            }\r\n        case actionTypes.UPDATE_USER_LIKES: \r\n            return {\r\n                ...state,\r\n                userLikes: action.data\r\n            }\r\n        case actionTypes.FETCH_USER_LIKE_LIST: \r\n            return {\r\n                ...state,\r\n                userLikes: action.data\r\n            }\r\n        case actionTypes.NEW_UPLOAD_STARTED: \r\n            return {\r\n                ...state,\r\n                uploadDone: false\r\n            }\r\n        case actionTypes.NEW_UPLOAD_FINISHED: \r\n            return {\r\n                ...state,\r\n                uploadDone: true\r\n            }\r\n        case actionTypes.TOGGLE_SEARCH: \r\n            return {\r\n                ...state,\r\n                searching: !state.searching\r\n            }\r\n        case actionTypes.FETCH_LIKED_SELLS: \r\n            return {\r\n                ...state,\r\n                fetchDone: true,\r\n                likedSells: action.data\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\ReduxStore\\actionTypes.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\Firebase\\Firebase.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\NavBar\\NavBar.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\MySells\\MySells.js",["82","83","84","85"],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\NovaVenda\\NovaVenda.js",["86"],"import React, {useState, useEffect} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport './NovaVenda.css';\r\nimport CustomButton from '../UI/Button';\r\nimport * as reducerAPI from '..//ReduxStore/reducer';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport {connect} from 'react-redux';\r\nimport ImagePreview from '../UI/BulkImagePreview/BulkImagePreview';\r\nimport Spinner from '../UI/Spinner';\r\nimport $ from 'jquery';\r\nimport TextDisplay from '../UI/TextDisplay';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport Button from '@material-ui/core/Button';\r\nimport ConfirmDialog from '../UI/ConfirmDialog/ConfirmDialog';\r\n\r\nconst NovaVenda = props => {\r\n\r\n    const [input, setInput] = useState({\r\n                            title: \"\",\r\n                            description: \"\",\r\n                            price: \"\",\r\n                            images: null,\r\n                            phone_number: \"\",\r\n                            email: props.email,\r\n                            date: new Date().toISOString().slice(0, 10),\r\n                            profile_photo: props.photo,\r\n                            owner: props.userName,\r\n                            complete: \"false\",\r\n                            likeCount: 0,\r\n                            userId: props.userId\r\n                            });\r\n    \r\n    // images for preview\r\n    const [images, setImages] = useState(null);                        \r\n\r\n    const [createButtonClicked, setCreateButtonClicked] = useState( false );\r\n\r\n    const [ alertDialogSettings, setAlertDialogSettings ] = useState( {\r\n        title: null,\r\n        description: null,\r\n        show: false,\r\n        disableBackdrop: false\r\n    });\r\n\r\n    const [ alertOkClicked, setAlertOkClicked ] = useState( false );\r\n\r\n    const postNewSell = () => {\r\n        var data = input;\r\n        if (data.price <= 0 || data.images === null) {\r\n            if (data.title === \"\") { \r\n                setAlertDialogSettings( {\r\n                    title: \"Adicione um título!\",\r\n                    description: null,\r\n                    show: true\r\n                })\r\n                return; \r\n            }\r\n            if (data.price <= 0) { \r\n                setAlertDialogSettings( {\r\n                    title: \"Preço não é válido!\",\r\n                    description: \"O preço tem de ser superior a 0.\",\r\n                    show: true\r\n                })\r\n                return; \r\n            }\r\n            if (data.images === null) { \r\n                setAlertDialogSettings( {\r\n                    title: \"Adicione pelo menos uma imagem!\",\r\n                    description: null,\r\n                    show: true\r\n                })\r\n                return; \r\n            }\r\n            setInput({\r\n                ...input,\r\n                price: 0\r\n            })\r\n            return;\r\n        }\r\n        props.uploadNewSell( data) ;\r\n        setCreateButtonClicked( true );\r\n    }\r\n\r\n    const handleImagesChange = ( value, targetValue ) => {\r\n        if ( value.length > 5 ) {\r\n            targetValue = null;\r\n            setAlertDialogSettings( {\r\n                title: \"Só pode adicionar no máximo 5 imagens!\",\r\n                description: null,\r\n                show: true\r\n            })\r\n            $(\"input#images\").val(\"\");\r\n            setImages(null); \r\n            setInput({\r\n                ...input,\r\n                images: null\r\n            });\r\n            return;\r\n        }\r\n        let newImageState = [];\r\n        let images = [];\r\n        for (let image in value) {\r\n            if ( image === 'length' ) break;\r\n            newImageState.push(URL.createObjectURL( value[image]  ) );\r\n            images.push( value[image] );\r\n        }\r\n        setImages(newImageState); \r\n        setInput({\r\n            ...input,\r\n            images: images\r\n        });\r\n    }\r\n\r\n    useEffect( () => {\r\n        if (createButtonClicked && props.uploadDone) {\r\n            setAlertDialogSettings( {\r\n                title: \"Troca criada!\",\r\n                description: null,\r\n                show: true,\r\n                disableBackdrop: true\r\n            })\r\n        }\r\n    }, [createButtonClicked, props.uploadDone]);\r\n\r\n    useEffect( () => {\r\n        if ( createButtonClicked && alertOkClicked) props.history.push(\"/\");\r\n        else if ( alertOkClicked ) {\r\n            setAlertDialogSettings( {\r\n                title: null,\r\n                description: null,\r\n                show: false\r\n            })\r\n            setAlertOkClicked( false );\r\n        }\r\n    }, [createButtonClicked, alertOkClicked ] )\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"heading\">\r\n                <TextDisplay text=\"Nova venda\" headingType=\"h4\"/>\r\n            </div>\r\n            <form className=\"new-sell\" noValidate autoComplete=\"off\">\r\n                <TextField id=\"title\" label=\"Titulo da venda\" variant=\"outlined\" className=\"input\" onChange={(event) => setInput({...input,title: event.target.value})}/>\r\n                <TextField id=\"preco\" label=\"Preço\" variant=\"outlined\" className=\"input\" type=\"number\" value={input.price} onChange={(event) => setInput({...input,price: event.target.value})}\r\n                    InputProps={{\r\n                    startAdornment: <InputAdornment position=\"start\">€</InputAdornment>,\r\n                    }}\r\n                />\r\n                <TextField id=\"description\" label=\"Descrição (opcional)\" variant=\"outlined\" className=\"input\" multiline rows={7} onChange={(event) => setInput({...input,description: event.target.value})}/>\r\n                <TextField id=\"phone_number\" label=\"Contacto (opcional)\" variant=\"outlined\" className=\"input\" onChange={(event) => setInput({...input,phone_number: event.target.value})}/>\r\n                <TextField id=\"email\" label=\"Email\" variant=\"outlined\" className=\"input\" onChange={(event) => setInput({...input,email: event.target.value})} value={input.email} />\r\n                \r\n                <input accept=\"image/*\" id=\"contained-button-file\" type=\"file\" multiple onChange={(event) => handleImagesChange(event.target.files, event.target.value)} />\r\n                <label htmlFor=\"contained-button-file\" className=\"upload-container\">\r\n                    <Button variant=\"contained\" color=\"primary\" component=\"span\" className=\"upload-button\">\r\n                        <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\" className=\"upload-photo-icon\">\r\n                            <PhotoCamera />\r\n                        </IconButton>\r\n                        Upload\r\n                    </Button>\r\n                </label>\r\n                { images ? <ImagePreview bulkImages={images} /> : null }\r\n                { !props.uploadDone ? <Spinner className=\"spinner-my-sells\"/> : <CustomButton color=\"primary\" className=\"new-sell-button\" text=\"Criar\" click={postNewSell}/> }\r\n            </form>\r\n            <ConfirmDialog alert disableEscapeKeyDown={alertDialogSettings.disableBackdrop} disableBackdropClick={alertDialogSettings.disableBackdrop} \r\n                        title={alertDialogSettings.title} description={alertDialogSettings.description} \r\n                        open={alertDialogSettings.show} click={ () => setAlertOkClicked( true ) } \r\n                        onClose={ () => setAlertDialogSettings( {...alertDialogSettings, show: false} ) } />\r\n        </React.Fragment>\r\n    );\r\n}        \r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        userId: state.user.id,\r\n        email: state.user.email,\r\n        photo: state.user.photo,\r\n        userName: state.user.name,\r\n        uploadDone: state.uploadDone\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        uploadNewSell: data => dispatch( reducerAPI.uploadNewSell( data ) )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NovaVenda);\r\n","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\HomePage\\HomePage.js",["87","88"],"import React, { useState, useEffect } from 'react';\r\nimport Button from '../UI/Button';\r\nimport './HomePage.css';\r\nimport {connect} from 'react-redux';\r\nimport * as ReducerAPI from '../ReduxStore/reducer';\r\nimport Card from '../UI/Card/Card';\r\nimport Spinner from '../UI/Spinner';\r\nimport * as actionTypes from '../ReduxStore/actionTypes';\r\nimport TextDisplay from '../UI/TextDisplay';\r\nimport poweredByGoogle from '../images/powered_by_google_on_white.png';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport AlgoliaSearch from '../UI/AlgoliaSearch/AlgoliaSearch';\r\n\r\nconst HomePage = props => {\r\n    \r\n    const cachedCredential = sessionStorage.getItem('cp-persuasive-user');\r\n\r\n    const [ autoLoginStarted, setAutoLoginStarted ] = useState( false );\r\n\r\n    const redirect = path => {\r\n        props.history.replace(path);\r\n    }\r\n\r\n    const fetchDataOnClick = () => {   \r\n        props.initFetch();\r\n        props.fetchData(props.user.id);\r\n        props.getLikeList(props.user.id);\r\n    }\r\n\r\n    const loginButtonClick = () => props.login();\r\n\r\n    const generateSells = sells => (\r\n            <React.Fragment>\r\n                <div className=\"sells-content\"> \r\n                    { Object.keys(sells).map( ( sell, index )  => {\r\n                        if ( index  > 4 ) return null;\r\n                        return <Card key={sells[sell].docId} docData={sells[sell]} value={sells[sell].docId}/>;\r\n                     }) }\r\n                </div>\r\n                <hr className=\"horizontal-break\" />\r\n                <TextDisplay text=\"Mais publicações\" headingType=\"h4\" className=\"\"/>\r\n                <div className=\"sells-content\"> \r\n                    { Object.keys(sells).map( ( sell, index )  => {\r\n                        if ( index  <= 4 ) return null;\r\n                        return <Card key={sells[sell].docId} docData={sells[sell]} value={sells[sell].docId}/>;\r\n                     }) }\r\n                </div>\r\n                <div className=\"sells-content\">\r\n                    <AddIcon onClick={ fetchDataOnClick } fontSize=\"large\" className=\"load-more-icon\"/>\r\n                </div>\r\n            </React.Fragment>\r\n            );\r\n    \r\n    useEffect( () => {\r\n        if ( cachedCredential && !props.user ) loginButtonClick();\r\n        else if ( !cachedCredential && !props.user && sessionStorage.getItem('login-init') === 'true' ) {\r\n            props.login( true );\r\n            setAutoLoginStarted( true );\r\n        }\r\n        else if ( autoLoginStarted && props.user ) setAutoLoginStarted( false );\r\n    } )\r\n\r\n    useEffect( () => {\r\n        if ( !props.user ) return;\r\n        props.initFetch();\r\n        props.fetchData(props.user.id, true);\r\n        props.getLikeList(props.user.id);\r\n\r\n    }, [ props.user ] );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"homepage-content\">\r\n                { !props.fetchDone || ( cachedCredential  && !props.user ) || autoLoginStarted ? <Spinner /> : null}\r\n                \r\n                    { !props.user  ? \r\n                    <div className=\"homepage-buttons\">\r\n                        <div className=\"login-display\">\r\n                            { !cachedCredential && !autoLoginStarted ? \r\n                                <Button color=\"primary\" text=\"Login\" className=\"buttons login\"  click={loginButtonClick} />\r\n                                : null }\r\n                            <img src={poweredByGoogle} width=\"25px\" alt=\"poweredByGoogle\"/>\r\n                        </div>\r\n                    </div> \r\n                    : <React.Fragment>\r\n                        <div className=\"homepage-buttons\">\r\n                            <Button text=\"Vender\" className=\"buttons blue\" click={ () => redirect(\"/nova-venda\")}/>\r\n                            <Button text=\"Minha área\" className=\"buttons yellow\" click={ () => redirect(\"/minhas-vendas\")}/>   \r\n                        </div>\r\n                        <AlgoliaSearch />\r\n                     </React.Fragment>\r\n                    }\r\n                \r\n                { props.otherSells && props.user && !props.searching ? \r\n                <React.Fragment>\r\n                    <TextDisplay text=\"Publicações mais curtidas\" headingType=\"h4\"/>\r\n                    { props.fetchDone ? generateSells( props.otherSells ) : null }\r\n                    </React.Fragment> \r\n                : null }\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.user,\r\n        otherSells: state.otherSells,\r\n        fetchDone: state.fetchDone,\r\n        searching: state.searching\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        login: value => dispatch(ReducerAPI.tryLogin(value)),\r\n        initFetch: () => dispatch({type: actionTypes.START_FETCH}),\r\n        fetchData: (uId, limit = false) => dispatch(ReducerAPI.fetchOtherSells(uId, limit)),\r\n        getLikeList: (uId) => dispatch(ReducerAPI.getUserLikeList(uId))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(HomePage);\r\n\r\n\r\n","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\Algolia\\Algolia.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\Spinner.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\TextDisplay.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\Button.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\AlgoliaSearch\\AlgoliaSearch.js",["89","90"],"import algoliasearch from 'algoliasearch/lite';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Card from '../Card/Card';\r\nimport { getBulkImageUrl } from '../../Firebase/Firebase';\r\nimport { connect } from 'react-redux';\r\nimport * as actionTypes from '../../ReduxStore/actionTypes';\r\nimport Spinner from '../Spinner';\r\nimport './AlgoliaSearch.css';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { sendSearchEvent } from '../../Algolia/Algolia';\r\n\r\nconst searchClient = algoliasearch(\r\n  'BUC2AFISV8',\r\n  '3347ced814c369f956cf3fa1bc564dd9'\r\n);\r\nconst index = searchClient.initIndex('search-sells');\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: 'auto',\r\n    },\r\n    marginBottom: '20px'\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n    width: '100%'\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%'\r\n  },\r\n}));\r\n\r\n\r\nconst AlgoliaSearch = props => {\r\n  const classes = useStyles();\r\n\r\n  const [ hits, setHits ] = useState(null);\r\n\r\n  const [ loading, setLoading ] = useState(false);\r\n\r\n  const [ search, setSearch ] = useState(null);\r\n\r\n  const fetchCompleteData = async hits => (\r\n    await Promise.all( hits.map( async hit => { \r\n      let completeHitData = hit;\r\n      await getBulkImageUrl( hit.userId, hit.images ).then( response => completeHitData[\"imagesUrl\"] = response ).catch(error => console.error( error ) );\r\n      return completeHitData;\r\n    }) )\r\n)\r\n\r\n  useEffect( () => {\r\n      if ( search && search.length >= 3 && search !== '' ) {\r\n        if ( !props.searching ) props.toggleSearch();\r\n        setLoading( true );\r\n\r\n        index.search(search, {filters: 'complete:false'}).then( ({ queryID, hits }) => fetchCompleteData( hits ).then( response => { \r\n          console.log(hits);\r\n          if ( hits ) sendSearchEvent(queryID, props.userId, hits.map( hit => hit.objectID));\r\n          setLoading( false );\r\n          setHits( response );\r\n        }) );\r\n        return;\r\n      }\r\n      setHits( null );\r\n      if ( props.searching ) props.toggleSearch();\r\n  }, [search]);\r\n\r\n  // hotfix\r\n  useEffect( () => {\r\n    if ( search === '' ) setHits( null );\r\n  });\r\n\r\n    return ( \r\n      <React.Fragment>\r\n        <div className={classes.search + \" search-container\"}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Digite...\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n              onChange={ e => setSearch(e.target.value) }\r\n            />\r\n        </div>\r\n        { loading ? <Spinner /> : null }\r\n        { hits ? \r\n          <div className=\"algo-search-cards\">\r\n            {hits.map( hit => <Card key={ hit.docId } docData={ hit }  value={ hit.docId } /> ) } \r\n          </div>\r\n          : null } \r\n      </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searching: state.searching,\r\n    userId: state.user.id\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    toggleSearch: () => dispatch({type: actionTypes.TOGGLE_SEARCH})\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(AlgoliaSearch);\r\n","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\Card\\Card.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\BulkImagePreview\\BulkImagePreview.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\BoxList\\BoxList.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\ConfirmDialog\\ConfirmDialog.js",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":2,"column":9,"nodeType":"97","messageId":"98","endLine":2,"endColumn":14},{"ruleId":"95","severity":1,"message":"99","line":11,"column":8,"nodeType":"97","messageId":"98","endLine":11,"endColumn":13},{"ruleId":"95","severity":1,"message":"100","line":12,"column":8,"nodeType":"97","messageId":"98","endLine":12,"endColumn":12},{"ruleId":"95","severity":1,"message":"101","line":13,"column":8,"nodeType":"97","messageId":"98","endLine":13,"endColumn":11},{"ruleId":"102","severity":1,"message":"103","line":39,"column":8,"nodeType":"104","endLine":39,"endColumn":39,"suggestions":"105"},{"ruleId":"102","severity":1,"message":"106","line":136,"column":8,"nodeType":"104","endLine":136,"endColumn":46,"suggestions":"107"},{"ruleId":"102","severity":1,"message":"108","line":54,"column":5,"nodeType":"97","endLine":54,"endColumn":14,"suggestions":"109"},{"ruleId":"102","severity":1,"message":"110","line":69,"column":8,"nodeType":"104","endLine":69,"endColumn":22,"suggestions":"111"},{"ruleId":"102","severity":1,"message":"110","line":95,"column":6,"nodeType":"104","endLine":95,"endColumn":14,"suggestions":"112"},{"ruleId":"102","severity":1,"message":"113","line":98,"column":3,"nodeType":"97","endLine":98,"endColumn":12,"suggestions":"114"},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'login' is defined but never used.","Identifier","unusedVar","'Paper' is defined but never used.","'Tabs' is defined but never used.","'Tab' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchLikedSells' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["117"],"React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["118"],"React Hook useEffect contains a call to 'setAutoLoginStarted'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [cachedCredential, props, loginButtonClick, autoLoginStarted] as a second argument to the useEffect Hook.",["119"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["120"],["121"],"React Hook useEffect contains a call to 'setHits'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [search] as a second argument to the useEffect Hook.",["122"],"no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},"Update the dependencies array to be: [currentTab, fetchLikedSells, props, props.userLikes]",{"range":"135","text":"136"},"Update the dependencies array to be: [createButtonClicked, alertOkClicked, props.history]",{"range":"137","text":"138"},"Add dependencies array: [cachedCredential, props, loginButtonClick, autoLoginStarted]",{"range":"139","text":"140"},"Update the dependencies array to be: [props, props.user]",{"range":"141","text":"142"},"Update the dependencies array to be: [props, search]",{"range":"143","text":"144"},"Add dependencies array: [search]",{"range":"145","text":"146"},[1448,1479],"[currentTab, fetchLikedSells, props, props.userLikes]",[4653,4691],"[createButtonClicked, alertOkClicked, props.history]",[2546,2546],", [cachedCredential, props, loginButtonClick, autoLoginStarted]",[2739,2753],"[props, props.user]",[2972,2980],"[props, search]",[3067,3067],", [search]"]