[{"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\index.js":"1","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\App.js":"2","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\ReduxStore\\reducer.js":"3","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\ReduxStore\\actionTypes.js":"4","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\Firebase\\Firebase.js":"5","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\NavBar\\NavBar.js":"6","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\MySells\\MySells.js":"7","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\NovaVenda\\NovaVenda.js":"8","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\HomePage\\HomePage.js":"9","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\Algolia\\Algolia.js":"10","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\Spinner.js":"11","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\TextDisplay.js":"12","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\Button.js":"13","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\AlgoliaSearch\\AlgoliaSearch.js":"14","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\Card\\Card.js":"15","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\BulkImagePreview\\BulkImagePreview.js":"16","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\BoxList\\BoxList.js":"17"},{"size":735,"mtime":1609792658495,"results":"18","hashOfConfig":"19"},{"size":840,"mtime":1609267524355,"results":"20","hashOfConfig":"19"},{"size":5612,"mtime":1610227602031,"results":"21","hashOfConfig":"19"},{"size":704,"mtime":1610069165383,"results":"22","hashOfConfig":"19"},{"size":7219,"mtime":1610227527563,"results":"23","hashOfConfig":"19"},{"size":1432,"mtime":1610227713119,"results":"24","hashOfConfig":"19"},{"size":5739,"mtime":1610071007087,"results":"25","hashOfConfig":"19"},{"size":5887,"mtime":1610143333099,"results":"26","hashOfConfig":"19"},{"size":5006,"mtime":1610227341807,"results":"27","hashOfConfig":"19"},{"size":1095,"mtime":1610157967766,"results":"28","hashOfConfig":"19"},{"size":217,"mtime":1610142173065,"results":"29","hashOfConfig":"19"},{"size":273,"mtime":1609512317907,"results":"30","hashOfConfig":"19"},{"size":369,"mtime":1609267524463,"results":"31","hashOfConfig":"19"},{"size":4227,"mtime":1610158557632,"results":"32","hashOfConfig":"19"},{"size":6260,"mtime":1610051148061,"results":"33","hashOfConfig":"19"},{"size":1369,"mtime":1610061246790,"results":"34","hashOfConfig":"19"},{"size":867,"mtime":1609520567604,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"6x0sug",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\index.js",[],["74","75"],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\App.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\ReduxStore\\reducer.js",["76"],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\ReduxStore\\actionTypes.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\Firebase\\Firebase.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\NavBar\\NavBar.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\MySells\\MySells.js",["77"],"import React, { useState, useEffect } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as ReducerAPI from '../ReduxStore/reducer';\r\nimport * as actionTypes from '../ReduxStore/actionTypes';\r\nimport './MySells.css';\r\nimport Spinner from '../UI/Spinner';\r\nimport Card from '../UI/Card/Card';\r\nimport TextDisplay from '../UI/TextDisplay';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\n\r\nconst MySells = props => {\r\n\r\n    const [ showComplete, setShowComplete ] = useState(false);\r\n    \r\n    const [ currentTab, setCurrentTab ] = useState(0);\r\n\r\n    useEffect( () => {\r\n        if ( currentTab === 0) {\r\n            props.startFetch();\r\n            props.getSellsData(props.user.id);\r\n            return;\r\n        }\r\n        fetchLikedSells();\r\n    }, [ currentTab, props.userLikes ] )\r\n\r\n    const deleteCurrentEntry = docId => {\r\n        const confirmation = window.confirm(\"Quer mesmo eliminar a referida venda/troca?\");\r\n        if (confirmation) props.deleteSell(docId, props.sells);\r\n    }\r\n\r\n    const updateDocData = docId => {\r\n        const confirmation = window.confirm(\"Completar troca/venda?\");\r\n        if ( !confirmation ) return;\r\n        let data = {...props.sells[docId]};\r\n        data[\"complete\"] = \"true\";\r\n        data[\"completionDate\"] = new Date().toISOString().slice(0, 10);\r\n        props.updateData( docId, data );\r\n    }\r\n\r\n    const generateSellDisplays = sells => (\r\n        <div className=\"sells-content\"> \r\n            { Object.keys(sells).map( key => {\r\n                if ( sells[key].complete === 'true' && !showComplete ) return null;\r\n                return <Card key={sells[key].docId} docData={sells[key]} value={sells[key].docId}\r\n                                                        canDelete={deleteCurrentEntry}\r\n                                                        completeSell={updateDocData}\r\n                                                        location={props.location.pathname}/>\r\n                }\r\n            ) }\r\n        </div>\r\n    );\r\n\r\n    const displayedCardNumber = sells => {\r\n        if ( !sells ) return 0;\r\n        return Object.keys(sells).reduce( (acc, sell) => {\r\n            if ( sells[sell].complete === 'true' && !showComplete ) return acc;\r\n            return acc + 1;\r\n        }, 0 )\r\n    }\r\n\r\n    const fetchLikedSells = () => {\r\n        props.startFetch();\r\n        props.getLikedSells( props.userLikes );\r\n    }\r\n\r\n    const generateLikedSells = sells => (\r\n        <div className=\"sells-content\"> \r\n            { Object.keys(sells).map( key =>  <Card key={sells[key].docId} docData={sells[key]} value={sells[key].docId}/>) }\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"my-sells\">\r\n            <div className=\"heading-display\">\r\n                { !props.fetchDone ? <Spinner /> : null }\r\n                <div className=\"text-and-switch\">\r\n                    {/* <TextDisplay text=\"Minhas publicações\" headingType=\"h4\"/> */}\r\n                    <Paper square className=\"nav-menu\">\r\n                        <Tabs\r\n                            value={currentTab}\r\n                            indicatorColor=\"primary\"\r\n                            textColor=\"primary\"\r\n                            onChange={ ( event, newValue ) => setCurrentTab(newValue)}\r\n                            centered\r\n                            className=\"tabs\"\r\n                        >\r\n                            <Tab label=\"Minhas publicações\" className=\"tab\"/>\r\n                            <Tab label=\"Meus favoritos\" className=\"tab\"/>\r\n                        </Tabs>\r\n                    </Paper>\r\n                    { currentTab === 0 ? <div className=\"toggle-complete-sells\">\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Switch\r\n                                onChange={ () => setShowComplete( !showComplete ) }\r\n                                color=\"primary\"\r\n                            />\r\n                        }\r\n                        label=\"Completas\"\r\n                    />\r\n                    </div>\r\n                    : null }\r\n                </div>\r\n                { displayedCardNumber( props.sells ) === 0 && currentTab === 0 ? <TextDisplay text=\"Não criou nenhuma publicação\" headingType=\"h6\"/> \r\n                : displayedCardNumber( props.likedSells ) === 0 && currentTab === 1 ? <TextDisplay text=\"Não gostou de nenhuma publicação\" headingType=\"h6\"/> : null  }\r\n            </div>\r\n            {  props.sells && props.fetchDone && currentTab === 0 ? generateSellDisplays(props.sells) : null}\r\n            {  props.likedSells && props.fetchDone && currentTab === 1 ? generateLikedSells(props.likedSells) : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.user,\r\n        sells: state.userSells,\r\n        fetchDone: state.fetchDone,\r\n        userLikes: state.userLikes,\r\n        likedSells: state.likedSells\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        startFetch: () => dispatch({type:actionTypes.START_FETCH}),\r\n        getSellsData: (userId) => dispatch(ReducerAPI.getUserSells(userId)),\r\n        deleteSell: (docId, sells) => dispatch(ReducerAPI.deleteSell(docId, sells)),\r\n        updateData: ( docId, data)  => dispatch(ReducerAPI.updateDocData( docId, data ) ),\r\n        getLikedSells: ( likeList ) => dispatch( ReducerAPI.fetchOtherSells( null, null, likeList ) )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MySells);","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\NovaVenda\\NovaVenda.js",["78"],"import React, {useState, useEffect} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport './NovaVenda.css';\r\nimport CustomButton from '../UI/Button';\r\nimport * as reducerAPI from '..//ReduxStore/reducer';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport {connect} from 'react-redux';\r\nimport ImagePreview from '../UI/BulkImagePreview/BulkImagePreview';\r\nimport Spinner from '../UI/Spinner';\r\nimport $ from 'jquery';\r\nimport TextDisplay from '../UI/TextDisplay';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst NovaVenda = props => {\r\n\r\n    const [input, setInput] = useState({\r\n                            title: \"\",\r\n                            description: \"\",\r\n                            price: \"\",\r\n                            images: null,\r\n                            phone_number: \"\",\r\n                            email: props.email,\r\n                            date: new Date().toISOString().slice(0, 10),\r\n                            profile_photo: props.photo,\r\n                            owner: props.userName,\r\n                            complete: \"false\",\r\n                            likeCount: 0,\r\n                            userId: props.userId\r\n                            });\r\n    \r\n    // images for preview\r\n    const [images, setImages] = useState(null);                        \r\n\r\n    const [createButtonClicked, setCreateButtonClicked] = useState( false );\r\n\r\n    useEffect( () => {\r\n        if (createButtonClicked && props.uploadDone) {\r\n            alert(\"Troca/venda criada!\");\r\n            props.history.push(\"/\");\r\n        }\r\n    }, [createButtonClicked, props.uploadDone]);\r\n\r\n    const postNewSell = () => {\r\n        var data = input;\r\n        if (data.price <= 0 || data.images === null) {\r\n            if (data.price <= 0) { alert(\"Preço não é válido!\"); return; }\r\n            if (data.images === null) { alert(\"Adicione pelo menos uma imagem!\"); return; }\r\n            setInput({\r\n                ...input,\r\n                price: 0\r\n            })\r\n            return;\r\n        }\r\n        props.uploadNewSell( data) ;\r\n        setCreateButtonClicked( true );\r\n    }\r\n\r\n    const handleImagesChange = ( value, targetValue ) => {\r\n        if ( value.length > 5 ) {\r\n            targetValue = null;\r\n            alert(\"Só pode adicionar no máximo 5 imagens!\");\r\n            $(\"input#images\").val(\"\");\r\n            setImages(null); \r\n            setInput({\r\n                ...input,\r\n                images: null\r\n            });\r\n            return;\r\n        }\r\n        let newImageState = [];\r\n        let images = [];\r\n        for (let image in value) {\r\n            if ( image === 'length' ) break;\r\n            newImageState.push(URL.createObjectURL( value[image]  ) );\r\n            images.push( value[image] );\r\n        }\r\n        setImages(newImageState); \r\n        setInput({\r\n            ...input,\r\n            images: images\r\n        });\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"heading\">\r\n                <TextDisplay text=\"Nova venda\" headingType=\"h4\"/>\r\n            </div>\r\n            <form className=\"new-sell\" noValidate autoComplete=\"off\">\r\n                <TextField id=\"title\" label=\"Titulo da venda\" variant=\"outlined\" className=\"input\" onChange={(event) => setInput({...input,title: event.target.value})}/>\r\n                <TextField id=\"preco\" label=\"Preço\" variant=\"outlined\" className=\"input\" type=\"number\" value={input.price} onChange={(event) => setInput({...input,price: event.target.value})}\r\n                    InputProps={{\r\n                    startAdornment: <InputAdornment position=\"start\">€</InputAdornment>,\r\n                    }}\r\n                />\r\n                <TextField id=\"description\" label=\"Descrição (opcional)\" variant=\"outlined\" className=\"input\" multiline rows={7} onChange={(event) => setInput({...input,description: event.target.value})}/>\r\n                <TextField id=\"phone_number\" label=\"Contacto (opcional)\" variant=\"outlined\" className=\"input\" onChange={(event) => setInput({...input,phone_number: event.target.value})}/>\r\n                <TextField id=\"email\" label=\"Email\" variant=\"outlined\" className=\"input\" onChange={(event) => setInput({...input,email: event.target.value})} value={input.email} />\r\n                \r\n                <input accept=\"image/*\" id=\"contained-button-file\" type=\"file\" multiple onChange={(event) => handleImagesChange(event.target.files, event.target.value)} />\r\n                <label htmlFor=\"contained-button-file\" className=\"upload-container\">\r\n                    <Button variant=\"contained\" color=\"primary\" component=\"span\" className=\"upload-button\">\r\n                        <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\" className=\"upload-photo-icon\">\r\n                            <PhotoCamera />\r\n                        </IconButton>\r\n                        Upload\r\n                    </Button>\r\n                </label>\r\n                { images ? <ImagePreview bulkImages={images} /> : null }\r\n                { !props.uploadDone ? <Spinner className=\"spinner-my-sells\"/> : <CustomButton color=\"primary\" className=\"new-sell-button\" text=\"Criar\" click={postNewSell}/> }\r\n            </form>\r\n\r\n        </React.Fragment>\r\n    );\r\n}        \r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        userId: state.user.id,\r\n        email: state.user.email,\r\n        photo: state.user.photo,\r\n        userName: state.user.name,\r\n        uploadDone: state.uploadDone\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        uploadNewSell: data => dispatch( reducerAPI.uploadNewSell( data ) )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NovaVenda);\r\n","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\HomePage\\HomePage.js",["79","80","81"],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\Algolia\\Algolia.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\Spinner.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\TextDisplay.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\Button.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\AlgoliaSearch\\AlgoliaSearch.js",["82","83"],"import algoliasearch from 'algoliasearch/lite';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Card from '../Card/Card';\r\nimport { getBulkImageUrl } from '../../Firebase/Firebase';\r\nimport { connect } from 'react-redux';\r\nimport * as actionTypes from '../../ReduxStore/actionTypes';\r\nimport Spinner from '../Spinner';\r\nimport './AlgoliaSearch.css';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { sendSearchEvent } from '../../Algolia/Algolia';\r\n\r\nconst searchClient = algoliasearch(\r\n  'BUC2AFISV8',\r\n  '3347ced814c369f956cf3fa1bc564dd9'\r\n);\r\nconst index = searchClient.initIndex('search-sells');\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: 'auto',\r\n    },\r\n    marginBottom: '20px'\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n    width: '100%'\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%'\r\n  },\r\n}));\r\n\r\n\r\nconst AlgoliaSearch = props => {\r\n  const classes = useStyles();\r\n\r\n  const [ hits, setHits ] = useState(null);\r\n\r\n  const [ loading, setLoading ] = useState(false);\r\n\r\n  const [ search, setSearch ] = useState(null);\r\n\r\n  const fetchCompleteData = async hits => (\r\n    await Promise.all( hits.map( async hit => { \r\n      let completeHitData = hit;\r\n      await getBulkImageUrl( hit.userId, hit.images ).then( response => completeHitData[\"imagesUrl\"] = response ).catch(error => console.error( error ) );\r\n      return completeHitData;\r\n    }) )\r\n)\r\n\r\n  useEffect( () => {\r\n      if ( search && search.length >= 3 && search !== '' ) {\r\n        if ( !props.searching ) props.toggleSearch();\r\n        setLoading( true );\r\n\r\n        index.search(search, {filters: 'complete:false'}).then( ({ queryID, hits }) => fetchCompleteData( hits ).then( response => { \r\n          console.log(hits);\r\n          if ( hits ) sendSearchEvent(queryID, props.userId, hits.map( hit => hit.objectID));\r\n          setLoading( false );\r\n          setHits( response );\r\n        }) );\r\n        return;\r\n      }\r\n      setHits( null );\r\n      if ( props.searching ) props.toggleSearch();\r\n  }, [search]);\r\n\r\n  // hotfix\r\n  useEffect( () => {\r\n    if ( search === '' ) setHits( null );\r\n  });\r\n\r\n    return ( \r\n      <React.Fragment>\r\n        <div className={classes.search + \" search-container\"}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Digite...\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n              onChange={ e => setSearch(e.target.value) }\r\n            />\r\n        </div>\r\n        { loading ? <Spinner /> : null }\r\n        { hits ? \r\n          <div className=\"algo-search-cards\">\r\n            {hits.map( hit => <Card key={ hit.docId } docData={ hit }  value={ hit.docId } /> ) } \r\n          </div>\r\n          : null } \r\n      </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searching: state.searching,\r\n    userId: state.user.id\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    toggleSearch: () => dispatch({type: actionTypes.TOGGLE_SEARCH})\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(AlgoliaSearch);\r\n","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\Card\\Card.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\BulkImagePreview\\BulkImagePreview.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\BoxList\\BoxList.js",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":2,"column":9,"nodeType":"90","messageId":"91","endLine":2,"endColumn":14},{"ruleId":"92","severity":1,"message":"93","line":28,"column":8,"nodeType":"94","endLine":28,"endColumn":39,"suggestions":"95"},{"ruleId":"92","severity":1,"message":"96","line":43,"column":8,"nodeType":"94","endLine":43,"endColumn":47,"suggestions":"97"},{"ruleId":"92","severity":1,"message":"98","line":59,"column":8,"nodeType":"94","endLine":59,"endColumn":10,"suggestions":"99"},{"ruleId":"92","severity":1,"message":"100","line":67,"column":8,"nodeType":"94","endLine":67,"endColumn":22,"suggestions":"101"},{"ruleId":"92","severity":1,"message":"102","line":71,"column":8,"nodeType":"94","endLine":71,"endColumn":20,"suggestions":"103"},{"ruleId":"92","severity":1,"message":"100","line":95,"column":6,"nodeType":"94","endLine":95,"endColumn":14,"suggestions":"104"},{"ruleId":"92","severity":1,"message":"105","line":98,"column":3,"nodeType":"90","endLine":98,"endColumn":12,"suggestions":"106"},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"no-unused-vars","'login' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchLikedSells' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["109"],"React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["110"],"React Hook useEffect has missing dependencies: 'cachedCredential', 'loginButtonClick', and 'props.user'. Either include them or remove the dependency array.",["111"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["112"],"React Hook useEffect has a missing dependency: 'loginButtonClicked'. Either include it or remove the dependency array.",["113"],["114"],"React Hook useEffect contains a call to 'setHits'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [search] as a second argument to the useEffect Hook.",["115"],"no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},"Update the dependencies array to be: [currentTab, fetchLikedSells, props, props.userLikes]",{"range":"130","text":"131"},"Update the dependencies array to be: [createButtonClicked, props.history, props.uploadDone]",{"range":"132","text":"133"},"Update the dependencies array to be: [cachedCredential, loginButtonClick, props.user]",{"range":"134","text":"135"},"Update the dependencies array to be: [props, props.user]",{"range":"136","text":"137"},"Update the dependencies array to be: [loginButtonClicked, props.user]",{"range":"138","text":"139"},"Update the dependencies array to be: [props, search]",{"range":"140","text":"141"},"Add dependencies array: [search]",{"range":"142","text":"143"},[964,995],"[currentTab, fetchLikedSells, props, props.userLikes]",[1737,1776],"[createButtonClicked, props.history, props.uploadDone]",[2334,2336],"[cachedCredential, loginButtonClick, props.user]",[2528,2542],"[props, props.user]",[2662,2674],"[loginButtonClicked, props.user]",[2972,2980],"[props, search]",[3067,3067],", [search]"]