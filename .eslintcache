[{"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\index.js":"1","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\App.js":"2","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\ReduxStore\\reducer.js":"3","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\ReduxStore\\actionTypes.js":"4","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\Firebase\\Firebase.js":"5","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\NavBar\\NavBar.js":"6","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\MySells\\MySells.js":"7","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\NovaVenda\\NovaVenda.js":"8","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\HomePage\\HomePage.js":"9","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\Algolia\\Algolia.js":"10","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\Spinner.js":"11","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\TextDisplay.js":"12","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\Button.js":"13","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\AlgoliaSearch\\AlgoliaSearch.js":"14","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\Card\\Card.js":"15","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\BulkImagePreview\\BulkImagePreview.js":"16","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\BoxList\\BoxList.js":"17"},{"size":735,"mtime":1609792658495,"results":"18","hashOfConfig":"19"},{"size":840,"mtime":1609267524355,"results":"20","hashOfConfig":"19"},{"size":5498,"mtime":1610069223494,"results":"21","hashOfConfig":"19"},{"size":704,"mtime":1610069165383,"results":"22","hashOfConfig":"19"},{"size":6784,"mtime":1610070089889,"results":"23","hashOfConfig":"19"},{"size":1698,"mtime":1610043589818,"results":"24","hashOfConfig":"19"},{"size":5739,"mtime":1610071007087,"results":"25","hashOfConfig":"19"},{"size":5887,"mtime":1610143333099,"results":"26","hashOfConfig":"19"},{"size":4684,"mtime":1610071815235,"results":"27","hashOfConfig":"19"},{"size":1093,"mtime":1610149015598,"results":"28","hashOfConfig":"19"},{"size":217,"mtime":1610142173065,"results":"29","hashOfConfig":"19"},{"size":273,"mtime":1609512317907,"results":"30","hashOfConfig":"19"},{"size":369,"mtime":1609267524463,"results":"31","hashOfConfig":"19"},{"size":4253,"mtime":1610149586037,"results":"32","hashOfConfig":"19"},{"size":6260,"mtime":1610051148061,"results":"33","hashOfConfig":"19"},{"size":1369,"mtime":1610061246790,"results":"34","hashOfConfig":"19"},{"size":867,"mtime":1609520567604,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"6x0sug",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\index.js",[],["74","75"],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\App.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\ReduxStore\\reducer.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\ReduxStore\\actionTypes.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\Firebase\\Firebase.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\NavBar\\NavBar.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\MySells\\MySells.js",["76"],"import React, { useState, useEffect } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as ReducerAPI from '../ReduxStore/reducer';\r\nimport * as actionTypes from '../ReduxStore/actionTypes';\r\nimport './MySells.css';\r\nimport Spinner from '../UI/Spinner';\r\nimport Card from '../UI/Card/Card';\r\nimport TextDisplay from '../UI/TextDisplay';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\n\r\nconst MySells = props => {\r\n\r\n    const [ showComplete, setShowComplete ] = useState(false);\r\n    \r\n    const [ currentTab, setCurrentTab ] = useState(0);\r\n\r\n    useEffect( () => {\r\n        if ( currentTab === 0) {\r\n            props.startFetch();\r\n            props.getSellsData(props.user.id);\r\n            return;\r\n        }\r\n        fetchLikedSells();\r\n    }, [ currentTab, props.userLikes ] )\r\n\r\n    const deleteCurrentEntry = docId => {\r\n        const confirmation = window.confirm(\"Quer mesmo eliminar a referida venda/troca?\");\r\n        if (confirmation) props.deleteSell(docId, props.sells);\r\n    }\r\n\r\n    const updateDocData = docId => {\r\n        const confirmation = window.confirm(\"Completar troca/venda?\");\r\n        if ( !confirmation ) return;\r\n        let data = {...props.sells[docId]};\r\n        data[\"complete\"] = \"true\";\r\n        data[\"completionDate\"] = new Date().toISOString().slice(0, 10);\r\n        props.updateData( docId, data );\r\n    }\r\n\r\n    const generateSellDisplays = sells => (\r\n        <div className=\"sells-content\"> \r\n            { Object.keys(sells).map( key => {\r\n                if ( sells[key].complete === 'true' && !showComplete ) return null;\r\n                return <Card key={sells[key].docId} docData={sells[key]} value={sells[key].docId}\r\n                                                        canDelete={deleteCurrentEntry}\r\n                                                        completeSell={updateDocData}\r\n                                                        location={props.location.pathname}/>\r\n                }\r\n            ) }\r\n        </div>\r\n    );\r\n\r\n    const displayedCardNumber = sells => {\r\n        if ( !sells ) return 0;\r\n        return Object.keys(sells).reduce( (acc, sell) => {\r\n            if ( sells[sell].complete === 'true' && !showComplete ) return acc;\r\n            return acc + 1;\r\n        }, 0 )\r\n    }\r\n\r\n    const fetchLikedSells = () => {\r\n        props.startFetch();\r\n        props.getLikedSells( props.userLikes );\r\n    }\r\n\r\n    const generateLikedSells = sells => (\r\n        <div className=\"sells-content\"> \r\n            { Object.keys(sells).map( key =>  <Card key={sells[key].docId} docData={sells[key]} value={sells[key].docId}/>) }\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"my-sells\">\r\n            <div className=\"heading-display\">\r\n                { !props.fetchDone ? <Spinner /> : null }\r\n                <div className=\"text-and-switch\">\r\n                    {/* <TextDisplay text=\"Minhas publicações\" headingType=\"h4\"/> */}\r\n                    <Paper square className=\"nav-menu\">\r\n                        <Tabs\r\n                            value={currentTab}\r\n                            indicatorColor=\"primary\"\r\n                            textColor=\"primary\"\r\n                            onChange={ ( event, newValue ) => setCurrentTab(newValue)}\r\n                            centered\r\n                            className=\"tabs\"\r\n                        >\r\n                            <Tab label=\"Minhas publicações\" className=\"tab\"/>\r\n                            <Tab label=\"Meus favoritos\" className=\"tab\"/>\r\n                        </Tabs>\r\n                    </Paper>\r\n                    { currentTab === 0 ? <div className=\"toggle-complete-sells\">\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Switch\r\n                                onChange={ () => setShowComplete( !showComplete ) }\r\n                                color=\"primary\"\r\n                            />\r\n                        }\r\n                        label=\"Completas\"\r\n                    />\r\n                    </div>\r\n                    : null }\r\n                </div>\r\n                { displayedCardNumber( props.sells ) === 0 && currentTab === 0 ? <TextDisplay text=\"Não criou nenhuma publicação\" headingType=\"h6\"/> \r\n                : displayedCardNumber( props.likedSells ) === 0 && currentTab === 1 ? <TextDisplay text=\"Não gostou de nenhuma publicação\" headingType=\"h6\"/> : null  }\r\n            </div>\r\n            {  props.sells && props.fetchDone && currentTab === 0 ? generateSellDisplays(props.sells) : null}\r\n            {  props.likedSells && props.fetchDone && currentTab === 1 ? generateLikedSells(props.likedSells) : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.user,\r\n        sells: state.userSells,\r\n        fetchDone: state.fetchDone,\r\n        userLikes: state.userLikes,\r\n        likedSells: state.likedSells\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        startFetch: () => dispatch({type:actionTypes.START_FETCH}),\r\n        getSellsData: (userId) => dispatch(ReducerAPI.getUserSells(userId)),\r\n        deleteSell: (docId, sells) => dispatch(ReducerAPI.deleteSell(docId, sells)),\r\n        updateData: ( docId, data)  => dispatch(ReducerAPI.updateDocData( docId, data ) ),\r\n        getLikedSells: ( likeList ) => dispatch( ReducerAPI.fetchOtherSells( null, null, likeList ) )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MySells);","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\NovaVenda\\NovaVenda.js",["77"],"import React, {useState, useEffect} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport './NovaVenda.css';\r\nimport CustomButton from '../UI/Button';\r\nimport * as reducerAPI from '..//ReduxStore/reducer';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport {connect} from 'react-redux';\r\nimport ImagePreview from '../UI/BulkImagePreview/BulkImagePreview';\r\nimport Spinner from '../UI/Spinner';\r\nimport $ from 'jquery';\r\nimport TextDisplay from '../UI/TextDisplay';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst NovaVenda = props => {\r\n\r\n    const [input, setInput] = useState({\r\n                            title: \"\",\r\n                            description: \"\",\r\n                            price: \"\",\r\n                            images: null,\r\n                            phone_number: \"\",\r\n                            email: props.email,\r\n                            date: new Date().toISOString().slice(0, 10),\r\n                            profile_photo: props.photo,\r\n                            owner: props.userName,\r\n                            complete: \"false\",\r\n                            likeCount: 0,\r\n                            userId: props.userId\r\n                            });\r\n    \r\n    // images for preview\r\n    const [images, setImages] = useState(null);                        \r\n\r\n    const [createButtonClicked, setCreateButtonClicked] = useState( false );\r\n\r\n    useEffect( () => {\r\n        if (createButtonClicked && props.uploadDone) {\r\n            alert(\"Troca/venda criada!\");\r\n            props.history.push(\"/\");\r\n        }\r\n    }, [createButtonClicked, props.uploadDone]);\r\n\r\n    const postNewSell = () => {\r\n        var data = input;\r\n        if (data.price <= 0 || data.images === null) {\r\n            if (data.price <= 0) { alert(\"Preço não é válido!\"); return; }\r\n            if (data.images === null) { alert(\"Adicione pelo menos uma imagem!\"); return; }\r\n            setInput({\r\n                ...input,\r\n                price: 0\r\n            })\r\n            return;\r\n        }\r\n        props.uploadNewSell( data) ;\r\n        setCreateButtonClicked( true );\r\n    }\r\n\r\n    const handleImagesChange = ( value, targetValue ) => {\r\n        if ( value.length > 5 ) {\r\n            targetValue = null;\r\n            alert(\"Só pode adicionar no máximo 5 imagens!\");\r\n            $(\"input#images\").val(\"\");\r\n            setImages(null); \r\n            setInput({\r\n                ...input,\r\n                images: null\r\n            });\r\n            return;\r\n        }\r\n        let newImageState = [];\r\n        let images = [];\r\n        for (let image in value) {\r\n            if ( image === 'length' ) break;\r\n            newImageState.push(URL.createObjectURL( value[image]  ) );\r\n            images.push( value[image] );\r\n        }\r\n        setImages(newImageState); \r\n        setInput({\r\n            ...input,\r\n            images: images\r\n        });\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"heading\">\r\n                <TextDisplay text=\"Nova venda\" headingType=\"h4\"/>\r\n            </div>\r\n            <form className=\"new-sell\" noValidate autoComplete=\"off\">\r\n                <TextField id=\"title\" label=\"Titulo da venda\" variant=\"outlined\" className=\"input\" onChange={(event) => setInput({...input,title: event.target.value})}/>\r\n                <TextField id=\"preco\" label=\"Preço\" variant=\"outlined\" className=\"input\" type=\"number\" value={input.price} onChange={(event) => setInput({...input,price: event.target.value})}\r\n                    InputProps={{\r\n                    startAdornment: <InputAdornment position=\"start\">€</InputAdornment>,\r\n                    }}\r\n                />\r\n                <TextField id=\"description\" label=\"Descrição (opcional)\" variant=\"outlined\" className=\"input\" multiline rows={7} onChange={(event) => setInput({...input,description: event.target.value})}/>\r\n                <TextField id=\"phone_number\" label=\"Contacto (opcional)\" variant=\"outlined\" className=\"input\" onChange={(event) => setInput({...input,phone_number: event.target.value})}/>\r\n                <TextField id=\"email\" label=\"Email\" variant=\"outlined\" className=\"input\" onChange={(event) => setInput({...input,email: event.target.value})} value={input.email} />\r\n                \r\n                <input accept=\"image/*\" id=\"contained-button-file\" type=\"file\" multiple onChange={(event) => handleImagesChange(event.target.files, event.target.value)} />\r\n                <label htmlFor=\"contained-button-file\" className=\"upload-container\">\r\n                    <Button variant=\"contained\" color=\"primary\" component=\"span\" className=\"upload-button\">\r\n                        <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\" className=\"upload-photo-icon\">\r\n                            <PhotoCamera />\r\n                        </IconButton>\r\n                        Upload\r\n                    </Button>\r\n                </label>\r\n                { images ? <ImagePreview bulkImages={images} /> : null }\r\n                { !props.uploadDone ? <Spinner className=\"spinner-my-sells\"/> : <CustomButton color=\"primary\" className=\"new-sell-button\" text=\"Criar\" click={postNewSell}/> }\r\n            </form>\r\n\r\n        </React.Fragment>\r\n    );\r\n}        \r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        userId: state.user.id,\r\n        email: state.user.email,\r\n        photo: state.user.photo,\r\n        userName: state.user.name,\r\n        uploadDone: state.uploadDone\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        uploadNewSell: data => dispatch( reducerAPI.uploadNewSell( data ) )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NovaVenda);\r\n","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\HomePage\\HomePage.js",["78","79"],"import React, { useState, useEffect } from 'react';\r\nimport Button from '../UI/Button';\r\nimport './HomePage.css';\r\nimport {connect} from 'react-redux';\r\nimport * as ReducerAPI from '../ReduxStore/reducer';\r\nimport Card from '../UI/Card/Card';\r\nimport Spinner from '../UI/Spinner';\r\nimport * as actionTypes from '../ReduxStore/actionTypes';\r\nimport TextDisplay from '../UI/TextDisplay';\r\nimport poweredByGoogle from '../images/powered_by_google_on_white.png';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport AlgoliaSearch from '../UI/AlgoliaSearch/AlgoliaSearch';\r\n\r\n\r\nconst HomePage = props => {\r\n    \r\n    const [ loginButtonClicked, setLoginButtonClicked ] = useState( false );\r\n\r\n    const redirect = path => {\r\n        props.history.replace(path);\r\n    }\r\n\r\n    useEffect( () => {\r\n        if ( !props.user ) return;\r\n\r\n        props.initFetch();\r\n        props.fetchData(props.user.id, true);\r\n        props.getLikeList(props.user.id);\r\n\r\n    }, [ props.user ] );\r\n\r\n    const fetchDataOnClick = () => {   \r\n        props.initFetch();\r\n        props.fetchData(props.user.id);\r\n        props.getLikeList(props.user.id);\r\n    }\r\n\r\n    const loginButtonClick = () => {\r\n        props.login();\r\n        setLoginButtonClicked( true );\r\n    }\r\n\r\n    const generateSells = sells => (\r\n            <React.Fragment>\r\n                <div className=\"sells-content\"> \r\n                    { Object.keys(sells).map( ( sell, index )  => {\r\n                        if ( index  > 4 ) return null;\r\n                        return <Card key={sells[sell].docId} docData={sells[sell]} value={sells[sell].docId}/>;\r\n                     }) }\r\n                </div>\r\n                <hr className=\"horizontal-break\" />\r\n                <TextDisplay text=\"Mais publicações\" headingType=\"h4\" className=\"\"/>\r\n                <div className=\"sells-content\"> \r\n                    { Object.keys(sells).map( ( sell, index )  => {\r\n                        if ( index  <= 4 ) return null;\r\n                        return <Card key={sells[sell].docId} docData={sells[sell]} value={sells[sell].docId}/>;\r\n                     }) }\r\n                </div>\r\n                <div className=\"sells-content\">\r\n                    <AddIcon onClick={ fetchDataOnClick } fontSize=\"large\" className=\"load-more-icon\"/>\r\n                </div>\r\n            </React.Fragment>\r\n            );\r\n\r\n    useEffect( () => {\r\n        if ( !props.user && loginButtonClicked ) setLoginButtonClicked( false );\r\n    }, [props.user])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"homepage-content\">\r\n                { !props.fetchDone ? <Spinner /> : null}\r\n                \r\n                    { !props.user ? \r\n                    <div className=\"homepage-buttons\">\r\n                        <div className=\"login-display\">\r\n                            <Button color=\"primary\" text=\"Login\" className={ !loginButtonClicked ? \"buttons login\" : \"buttons login clicked\" }  click={loginButtonClick} />\r\n                            <img src={poweredByGoogle} width=\"25px\" alt=\"poweredByGoogle\"/>\r\n                        </div>\r\n                    </div> \r\n                    : <React.Fragment>\r\n                        <div className=\"homepage-buttons\">\r\n                            <Button text=\"Vender\" className=\"buttons blue\" click={ () => redirect(\"/nova-venda\")}/>\r\n                            <Button text=\"Minha área\" className=\"buttons yellow\" click={ () => redirect(\"/minhas-vendas\")}/>   \r\n                        </div>\r\n                        <AlgoliaSearch />\r\n                     </React.Fragment>\r\n                    }\r\n                \r\n                { props.otherSells && props.user && !props.searching ? \r\n                <React.Fragment>\r\n                    <TextDisplay text=\"Publicações mais curtidas\" headingType=\"h4\"/>\r\n                    { props.fetchDone ? generateSells( props.otherSells ) : null }\r\n                    </React.Fragment> \r\n                : null }\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.user,\r\n        otherSells: state.otherSells,\r\n        fetchDone: state.fetchDone,\r\n        searching: state.searching\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        login: () => dispatch(ReducerAPI.tryLogin()),\r\n        initFetch: () => dispatch({type: actionTypes.START_FETCH}),\r\n        fetchData: (uId, limit = false) => dispatch(ReducerAPI.fetchOtherSells(uId, limit)),\r\n        getLikeList: (uId) => dispatch(ReducerAPI.getUserLikeList(uId))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(HomePage);\r\n\r\n\r\n","C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\Algolia\\Algolia.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\Spinner.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\TextDisplay.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\Button.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\AlgoliaSearch\\AlgoliaSearch.js",["80","81","82"],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\Card\\Card.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\BulkImagePreview\\BulkImagePreview.js",[],"C:\\Users\\Admin\\Desktop\\Francisco\\Universidade\\Mestrado\\CP\\cp-project\\src\\UI\\BoxList\\BoxList.js",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":28,"column":8,"nodeType":"89","endLine":28,"endColumn":39,"suggestions":"90"},{"ruleId":"87","severity":1,"message":"91","line":43,"column":8,"nodeType":"89","endLine":43,"endColumn":47,"suggestions":"92"},{"ruleId":"87","severity":1,"message":"93","line":30,"column":8,"nodeType":"89","endLine":30,"endColumn":22,"suggestions":"94"},{"ruleId":"87","severity":1,"message":"95","line":67,"column":8,"nodeType":"89","endLine":67,"endColumn":20,"suggestions":"96"},{"ruleId":"97","severity":1,"message":"98","line":12,"column":10,"nodeType":"99","messageId":"100","endLine":12,"endColumn":25},{"ruleId":"87","severity":1,"message":"93","line":95,"column":6,"nodeType":"89","endLine":95,"endColumn":14,"suggestions":"101"},{"ruleId":"87","severity":1,"message":"102","line":98,"column":3,"nodeType":"99","endLine":98,"endColumn":12,"suggestions":"103"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchLikedSells' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["106"],"React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["107"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["108"],"React Hook useEffect has a missing dependency: 'loginButtonClicked'. Either include it or remove the dependency array.",["109"],"no-unused-vars","'sendSearchEvent' is defined but never used.","Identifier","unusedVar",["110"],"React Hook useEffect contains a call to 'setHits'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [search] as a second argument to the useEffect Hook.",["111"],"no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},"Update the dependencies array to be: [currentTab, fetchLikedSells, props, props.userLikes]",{"range":"124","text":"125"},"Update the dependencies array to be: [createButtonClicked, props.history, props.uploadDone]",{"range":"126","text":"127"},"Update the dependencies array to be: [props, props.user]",{"range":"128","text":"129"},"Update the dependencies array to be: [loginButtonClicked, props.user]",{"range":"130","text":"131"},"Update the dependencies array to be: [props, search]",{"range":"132","text":"133"},"Add dependencies array: [search]",{"range":"134","text":"135"},[964,995],"[currentTab, fetchLikedSells, props, props.userLikes]",[1737,1776],"[createButtonClicked, props.history, props.uploadDone]",[958,972],"[props, props.user]",[2478,2490],"[loginButtonClicked, props.user]",[2998,3006],"[props, search]",[3093,3093],", [search]"]