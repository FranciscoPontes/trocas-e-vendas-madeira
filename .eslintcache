[{"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\index.js":"1","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\App.js":"2","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\ReduxStore\\reducer.js":"3","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\NavBar\\NavBar.js":"4","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\HomePage\\HomePage.js":"5","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\NovaVenda\\NovaVenda.js":"6","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\MySells\\MySells.js":"7","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\ReduxStore\\actionTypes.js":"8","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\Firebase\\Firebase.js":"9","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Button.js":"10","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Card\\Card.js":"11","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\TextDisplay.js":"12","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Spinner.js":"13","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Snackbar.js":"14","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\ConfirmDialog\\ConfirmDialog.js":"15","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\AlgoliaSearch\\AlgoliaSearch.js":"16","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\BulkImagePreview\\BulkImagePreview.js":"17","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\Algolia\\Algolia.js":"18","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\BoxList\\BoxList.js":"19"},{"size":760,"mtime":1609150802159,"results":"20","hashOfConfig":"21"},{"size":840,"mtime":1609171146038,"results":"22","hashOfConfig":"21"},{"size":5592,"mtime":1610467197291,"results":"23","hashOfConfig":"21"},{"size":1700,"mtime":1610379052319,"results":"24","hashOfConfig":"21"},{"size":6207,"mtime":1610468756857,"results":"25","hashOfConfig":"21"},{"size":8302,"mtime":1610474854795,"results":"26","hashOfConfig":"21"},{"size":7912,"mtime":1610472933784,"results":"27","hashOfConfig":"21"},{"size":704,"mtime":1610368037015,"results":"28","hashOfConfig":"21"},{"size":7810,"mtime":1610466098338,"results":"29","hashOfConfig":"21"},{"size":369,"mtime":1609151607210,"results":"30","hashOfConfig":"21"},{"size":6746,"mtime":1610472537617,"results":"31","hashOfConfig":"21"},{"size":467,"mtime":1610368037031,"results":"32","hashOfConfig":"21"},{"size":217,"mtime":1610368037029,"results":"33","hashOfConfig":"21"},{"size":470,"mtime":1610368037026,"results":"34","hashOfConfig":"21"},{"size":1713,"mtime":1610368037024,"results":"35","hashOfConfig":"21"},{"size":4114,"mtime":1610464964650,"results":"36","hashOfConfig":"21"},{"size":1576,"mtime":1610446838489,"results":"37","hashOfConfig":"21"},{"size":741,"mtime":1610468893753,"results":"38","hashOfConfig":"21"},{"size":867,"mtime":1609761299631,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1whupi1",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\index.js",[],["84","85"],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\App.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\ReduxStore\\reducer.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\NavBar\\NavBar.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\HomePage\\HomePage.js",["86","87"],"import React, { useState, useEffect } from 'react';\r\nimport Button from '../UI/Button';\r\nimport './HomePage.css';\r\nimport {connect} from 'react-redux';\r\nimport * as ReducerAPI from '../ReduxStore/reducer';\r\nimport Card from '../UI/Card/Card';\r\nimport Spinner from '../UI/Spinner';\r\nimport * as actionTypes from '../ReduxStore/actionTypes';\r\nimport TextDisplay from '../UI/TextDisplay';\r\nimport poweredByGoogle from '../images/powered_by_google_on_white.png';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport AlgoliaSearch from '../UI/AlgoliaSearch/AlgoliaSearch';\r\n\r\nconst HomePage = props => {\r\n    \r\n    const [ cachedCredential, setCachedCredential ] = useState( sessionStorage.getItem('cp-persuasive-user') );\r\n\r\n    const [ autoLoginStarted, setAutoLoginStarted ] = useState( false );\r\n\r\n    const redirect = path => {\r\n        props.history.replace(path);\r\n    }\r\n\r\n    const fetchDataOnClick = () => {   \r\n        props.initFetch();\r\n        props.fetchData(props.user.id);\r\n        props.getLikeList(props.user.id);\r\n    }\r\n\r\n    const loginButtonClick = () => props.login();\r\n\r\n    const generateSells = sells => (\r\n            <React.Fragment>\r\n                <div className=\"sells-content\"> \r\n                    { Object.keys(sells).map( ( sell, index )  => {\r\n                        if ( index  > 4 ) return null;\r\n                        return <Card key={sells[sell].docId} docData={sells[sell]} value={sells[sell].docId}/>;\r\n                     }) }\r\n                </div>\r\n                <hr className=\"horizontal-break\" />\r\n                <TextDisplay text=\"Mais publicações\" headingType=\"h5\" className=\"\"/>\r\n                <div className=\"sells-content\"> \r\n                    { Object.keys(sells).map( ( sell, index )  => {\r\n                        if ( index  <= 4 ) return null;\r\n                        return <Card key={sells[sell].docId} docData={sells[sell]} value={sells[sell].docId}/>;\r\n                     }) }\r\n                </div>\r\n                <div className=\"sells-content\">\r\n                    <AddIcon onClick={ fetchDataOnClick } fontSize=\"large\" className=\"load-more-icon\"/>\r\n                </div>\r\n            </React.Fragment>\r\n            );\r\n    \r\n    const informativeText = () => {\r\n        return (\r\n            <React.Fragment>\r\n                Nesta plataforma pode colocar anúncios de vendas dos seus produtos,\r\n                bem como ver anúncios de outras pessoas. O processo de venda ocorre externamente pela responsabilidades dos utilizadores.\r\n                <br/> <b>Dica de uso:</b> A qualquer momento pode clicar na bandeira do canto superior esquerdo para voltar à página inicial.\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    useEffect( () => {\r\n        if ( cachedCredential && !props.user ) loginButtonClick();\r\n        else if ( !cachedCredential && !props.user && sessionStorage.getItem('login-init') === 'true' ) {\r\n            props.login( true );\r\n            setAutoLoginStarted( true );\r\n        }\r\n        else if ( props.user === 'ERROR' ) { \r\n            console.log( \"Error trying auto login\" );\r\n            setCachedCredential( false );\r\n            sessionStorage.removeItem('cp-persuasive-user');\r\n            props.clearUser();\r\n        }\r\n        else if ( autoLoginStarted && props.user ) setAutoLoginStarted( false );\r\n    } )\r\n\r\n    useEffect( () => {\r\n        if ( !props.user || props.user === 'ERROR' ) return;\r\n        props.initFetch();\r\n        props.fetchData(props.user.id, true);\r\n        props.getLikeList(props.user.id);\r\n\r\n    }, [ props.user ] );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"homepage-content\">\r\n                { !props.fetchDone || ( cachedCredential  && !props.user && props.user !== 'ERROR' ) || autoLoginStarted ? <Spinner /> : null}\r\n                \r\n                    { !props.user  ? \r\n                    <React.Fragment> \r\n                        <div className=\"homepage-buttons\">\r\n                            <div className=\"login-display\">\r\n                                { !cachedCredential && !autoLoginStarted ? \r\n                                    <Button color=\"primary\" text=\"Login\" className=\"buttons login\"  click={loginButtonClick} />\r\n                                    : null }\r\n                                <img src={poweredByGoogle} width=\"25px\" alt=\"poweredByGoogle\"/>\r\n                            </div>\r\n                        </div> \r\n                        <TextDisplay text={informativeText()} headingType=\"h6\"/>\r\n                    </React.Fragment>\r\n                    : <React.Fragment>\r\n                        <div className=\"homepage-buttons\">\r\n                            <Button text=\"Vender\" className=\"buttons blue\" click={ () => redirect(\"/nova-venda\")}/>\r\n                            <Button text=\"Minha área\" className=\"buttons yellow\" click={ () => redirect(\"/minhas-vendas\")}/>   \r\n                        </div>\r\n                        <AlgoliaSearch />\r\n                     </React.Fragment>\r\n                    }\r\n                \r\n                { props.otherSells && props.user && !props.searching ? \r\n                <React.Fragment>\r\n                    <TextDisplay text=\"Publicações mais curtidas\" headingType=\"h5\"/>\r\n                    { props.fetchDone ? generateSells( props.otherSells ) : null }\r\n                    </React.Fragment> \r\n                : null }\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.user,\r\n        otherSells: state.otherSells,\r\n        fetchDone: state.fetchDone,\r\n        searching: state.searching\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        login: value => dispatch(ReducerAPI.tryLogin(value)),\r\n        initFetch: () => dispatch({type: actionTypes.START_FETCH}),\r\n        fetchData: (uId, limit = false) => dispatch(ReducerAPI.fetchOtherSells(uId, limit)),\r\n        getLikeList: (uId) => dispatch(ReducerAPI.getUserLikeList(uId)),\r\n        clearUser: () => dispatch( { type: actionTypes.LOGIN_USER, data: null} )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(HomePage);\r\n\r\n\r\n","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\NovaVenda\\NovaVenda.js",["88","89"],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\MySells\\MySells.js",["90","91"],"import React, { useState, useEffect } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as ReducerAPI from '../ReduxStore/reducer';\r\nimport * as actionTypes from '../ReduxStore/actionTypes';\r\nimport './MySells.scss';\r\nimport Spinner from '../UI/Spinner';\r\nimport Card from '../UI/Card/Card';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport ConfirmDialog from '../UI/ConfirmDialog/ConfirmDialog';\r\nimport TextDisplay from '../UI/TextDisplay';\r\nimport SnackBar from '../UI/Snackbar';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\nconst MySells = props => {\r\n\r\n    const [ showComplete, setShowComplete ] = useState(false);\r\n    \r\n    const [ currentTab, setCurrentTab ] = useState(0);\r\n\r\n    const [ showDeleteConfirmDialog, setShowDeleteConfirmDialog ] = useState( false );\r\n\r\n    const [ showUpdateConfirmDialog, setShowUpdateConfirmDialog ] = useState( false );\r\n\r\n    const [ docIdToDelete, setDocIdToDelete ] = useState( null );\r\n\r\n    const [ docIdToUpdate, setDocIdToUpdate ] = useState( null );\r\n\r\n    const [ showSnackBar, setShowSnackBar ] = useState( { message: null, show: false } );\r\n\r\n    const confirmDeleteCurrentEntry = docId => { \r\n        setDocIdToDelete( docId );\r\n        setShowDeleteConfirmDialog( true );\r\n    }\r\n\r\n    const deleteCurrentEntry = value => {\r\n        if ( value ) { \r\n            props.deleteSell(docIdToDelete, props.sells);\r\n            setShowSnackBar( {\r\n                message: 'Venda apagada!',\r\n                show: true\r\n            });\r\n        }\r\n        setDocIdToDelete( null );\r\n        setShowDeleteConfirmDialog( false );\r\n    }\r\n\r\n    const confirmUpdateDocData = docId => {\r\n        setDocIdToUpdate( docId );\r\n        setShowUpdateConfirmDialog( true );\r\n    }\r\n\r\n    const updateDocData = value => {\r\n        if ( value ) {\r\n            let data = {...props.sells[ docIdToUpdate ]};\r\n            data[\"complete\"] = \"true\";\r\n            data[\"completionDate\"] = new Date().toISOString().slice(0, 10);\r\n            props.updateData( docIdToUpdate, data );\r\n            setShowSnackBar( {\r\n                message: 'A venda foi completa!',\r\n                show: true\r\n            });\r\n        }\r\n        setDocIdToUpdate( null );\r\n        setShowUpdateConfirmDialog( false );\r\n    }\r\n\r\n    const generateSellDisplays = sells => (\r\n        <div className=\"sells-content\"> \r\n            { Object.keys(sells).map( key => {\r\n                if ( sells[key].complete === 'true' && !showComplete ) return null;\r\n                return <Card key={sells[key].docId} docData={sells[key]} value={sells[key].docId}\r\n                                                        canDelete={confirmDeleteCurrentEntry}\r\n                                                        completeSell={confirmUpdateDocData}\r\n                                                        location={props.location.pathname}/>\r\n                }\r\n            ) }\r\n        </div>\r\n    );\r\n\r\n    const displayedCardNumber = sells => {\r\n        if ( !sells || ( Object.keys(sells).length === 0 && sells.constructor === Object ) ) return 0;\r\n        return Object.keys(sells).reduce( (acc, sell) => {\r\n            if ( sells[sell].complete === 'true' && !showComplete ) return acc;\r\n            return acc + 1;\r\n        }, 0 )\r\n    }\r\n\r\n    const fetchLikedSells = () => {\r\n        props.startFetch();\r\n        props.getLikedSells( props.userLikes );\r\n    }\r\n\r\n    const generateLikedSells = sells => (\r\n        <div className=\"sells-content\"> \r\n            { Object.keys(sells).map( key =>  <Card key={sells[key].docId} docData={sells[key]} value={sells[key].docId}/>) }\r\n        </div>\r\n    );\r\n\r\n    const handleSnackbarClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n    \r\n        setShowSnackBar( false );\r\n      };\r\n\r\n    useEffect( () => {\r\n        if ( props.searching ) props.toggleSearch();\r\n    }, [] )\r\n\r\n    useEffect( () => {\r\n        if ( currentTab === 0) {\r\n            props.startFetch();\r\n            props.getSellsData(props.user.id);\r\n            return;\r\n        }\r\n        fetchLikedSells();\r\n    }, [ currentTab ] )\r\n\r\n    return (\r\n        <div className=\"my-sells\">\r\n            <div className=\"heading-display\">\r\n                { !props.fetchDone ? <Spinner /> : null }\r\n                <div className=\"text-and-switch\">\r\n                    <BottomNavigation\r\n                        value={currentTab}\r\n                        onChange={(event, newValue) => {\r\n                            setCurrentTab(newValue);\r\n                        }}\r\n                        showLabels\r\n                        className=\"mobile-nav\"\r\n                        >\r\n                        <BottomNavigationAction label=\"Minhas publicações\" icon={<FolderIcon fontSize=\"large\"/> } />\r\n                        <BottomNavigationAction label=\"Favoritos\" icon={<FavoriteIcon fontSize=\"large\"/>} />\r\n                    </BottomNavigation>\r\n                    { currentTab === 0 && displayedCardNumber( props.sells ) !== 0 ? <div className=\"toggle-complete-sells\">\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Switch\r\n                                onChange={ () => setShowComplete( !showComplete ) }\r\n                                color=\"primary\"\r\n                            />\r\n                        }\r\n                        label=\"Completas\"\r\n                        className=\"switch-completas\"\r\n                    />\r\n                    </div>\r\n                    : null }\r\n                </div>\r\n                { displayedCardNumber( props.sells ) === 0 && currentTab === 0 ? <TextDisplay text=\"Não criou nenhuma publicação\" headingType=\"h6\" className=\"no-data-text-display\"/> \r\n                : displayedCardNumber( props.likedSells ) === 0 && currentTab === 1 ? <TextDisplay text=\"Não gostou de nenhuma publicação\" headingType=\"h6\" className=\"no-data-text-display\"/> : null  }\r\n            </div>\r\n            {  props.sells && props.fetchDone && currentTab === 0 ? generateSellDisplays(props.sells) : null}\r\n            {  props.likedSells && props.fetchDone && currentTab === 1 ? generateLikedSells(props.likedSells) : null}\r\n            <ConfirmDialog open={showDeleteConfirmDialog} onClose={ () => setShowDeleteConfirmDialog( false ) } click={deleteCurrentEntry} title=\"Apagar venda?\"/>\r\n            <ConfirmDialog open={showUpdateConfirmDialog} onClose={ () => setShowUpdateConfirmDialog( false ) } click={updateDocData} title=\"Completar venda?\"/>\r\n            <SnackBar open={showSnackBar.show} closeSnackbar={ handleSnackbarClose } message={showSnackBar.message} className=\"snackbar-my-sells\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.user,\r\n        sells: state.userSells,\r\n        fetchDone: state.fetchDone,\r\n        userLikes: state.userLikes,\r\n        likedSells: state.likedSells,\r\n        searching: state.searching\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        startFetch: () => dispatch({type:actionTypes.START_FETCH}),\r\n        getSellsData: (userId) => dispatch(ReducerAPI.getUserSells(userId)),\r\n        deleteSell: (docId, sells) => dispatch(ReducerAPI.deleteSell(docId, sells)),\r\n        updateData: ( docId, data)  => dispatch(ReducerAPI.updateDocData( docId, data ) ),\r\n        getLikedSells: ( likeList ) => dispatch( ReducerAPI.fetchOtherSells( null, null, likeList ) ),\r\n        toggleSearch: () => dispatch( {type: actionTypes.TOGGLE_SEARCH} )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MySells);","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\ReduxStore\\actionTypes.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\Firebase\\Firebase.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Button.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Card\\Card.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\TextDisplay.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Spinner.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Snackbar.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\ConfirmDialog\\ConfirmDialog.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\AlgoliaSearch\\AlgoliaSearch.js",["92","93"],"import algoliasearch from 'algoliasearch/lite';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Card from '../Card/Card';\r\nimport { getBulkImageUrl } from '../../Firebase/Firebase';\r\nimport { connect } from 'react-redux';\r\nimport * as actionTypes from '../../ReduxStore/actionTypes';\r\nimport Spinner from '../Spinner';\r\nimport './AlgoliaSearch.css';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst searchClient = algoliasearch(\r\n  'BUC2AFISV8',\r\n  '3347ced814c369f956cf3fa1bc564dd9'\r\n);\r\nconst index = searchClient.initIndex('search-sells');\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: 'auto',\r\n    },\r\n    marginBottom: '20px'\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n    width: '100%'\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%'\r\n  },\r\n}));\r\n\r\n\r\nconst AlgoliaSearch = props => {\r\n  const classes = useStyles();\r\n\r\n  const [ hits, setHits ] = useState(null);\r\n\r\n  const [ loading, setLoading ] = useState(false);\r\n\r\n  const [ search, setSearch ] = useState(null);\r\n\r\n  const fetchCompleteData = async hits => (\r\n    await Promise.all( hits.map( async hit => { \r\n      let completeHitData = hit;\r\n      await getBulkImageUrl( hit.userId, hit.images ).then( response => completeHitData[\"imagesUrl\"] = response ).catch(error => console.error( error ) );\r\n      return completeHitData;\r\n    }) )\r\n)\r\n\r\n  useEffect( () => {\r\n      if ( search && search.length >= 3 && search !== '' ) {\r\n        props.toggleSearch( search );\r\n        setLoading( true );\r\n\r\n        index.search(search, {filters: 'complete:false AND NOT userId:' + props.userId }).then( ({ hits }) => fetchCompleteData( hits ).then( response => { \r\n          console.log( response );\r\n          setLoading( false );\r\n          setHits( response );\r\n        }) );\r\n        return;\r\n      }\r\n      setHits( null );\r\n      if ( props.searching ) props.toggleSearch();\r\n  }, [search]);\r\n\r\n  // hotfix\r\n  useEffect( () => {\r\n    if ( search === '' ) setHits( null );\r\n  });\r\n\r\n    return ( \r\n      <React.Fragment>\r\n        <div className={classes.search + \" search-container\"}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Digite...\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n              onChange={ e => setSearch(e.target.value) }\r\n            />\r\n        </div>\r\n        { loading ? <Spinner /> : null }\r\n        { hits ? \r\n          <div className=\"algo-search-cards\">\r\n            {hits.map( hit => <Card key={ hit.docId } docData={ hit }  value={ hit.docId } /> ) } \r\n          </div>\r\n          : null } \r\n      </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searching: state.searching,\r\n    userId: state.user.id\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    toggleSearch: ( data = null ) => dispatch({type: actionTypes.TOGGLE_SEARCH, data: data})\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(AlgoliaSearch);\r\n","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\BulkImagePreview\\BulkImagePreview.js",["94"],"import React, {useEffect, useState} from 'react';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport './BulkImagePreview.css';\r\nimport { connect } from 'react-redux';\r\n\r\nconst BulkImagePreview = props => {                        \r\n    \r\n    const [currentImage, setCurrentImage] = useState(props.bulkImages[0]);     \r\n    \r\n    const [currentIndex, setCurrentIndex] = useState(0);     \r\n    \r\n    const [ imageExpand, setImageExpand] = useState( false );\r\n\r\n    const changeCurrentImage = position => {\r\n        setCurrentImage(props.bulkImages[position]);\r\n        setCurrentIndex(position);\r\n    }\r\n\r\n    const chipForImages = () => {\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"preview-images\">\r\n                    <img alt=\"selected\" className={ imageExpand ? \"img-clicked\" : \"\"} src={currentImage} width=\"200px\" height=\"200px\" id=\"img-to-zoom\" onClick={ () => setImageExpand( !imageExpand ) }/>\r\n                    <div className=\"images-chips\">\r\n                        { props.bulkImages.map( ( value, index ) => <Chip label={index + 1} key={value + index} className={currentIndex === index ? \"selected-chip\" : \"chips\"} onClick={ () => changeCurrentImage(index) }/>) }\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    \r\n    return props.bulkImages ? chipForImages() : null;\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searching: state.searching,\r\n        userId: state.user.id\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(BulkImagePreview);","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\Algolia\\Algolia.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\BoxList\\BoxList.js",[],["95","96"],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":64,"column":5,"nodeType":"103","endLine":64,"endColumn":14,"suggestions":"104"},{"ruleId":"101","severity":1,"message":"105","line":85,"column":8,"nodeType":"106","endLine":85,"endColumn":22,"suggestions":"107"},{"ruleId":"101","severity":1,"message":"105","line":119,"column":8,"nodeType":"106","endLine":119,"endColumn":10,"suggestions":"108"},{"ruleId":"101","severity":1,"message":"109","line":142,"column":8,"nodeType":"106","endLine":142,"endColumn":46,"suggestions":"110"},{"ruleId":"101","severity":1,"message":"105","line":113,"column":8,"nodeType":"106","endLine":113,"endColumn":10,"suggestions":"111"},{"ruleId":"101","severity":1,"message":"112","line":122,"column":8,"nodeType":"106","endLine":122,"endColumn":22,"suggestions":"113"},{"ruleId":"101","severity":1,"message":"105","line":93,"column":6,"nodeType":"106","endLine":93,"endColumn":14,"suggestions":"114"},{"ruleId":"101","severity":1,"message":"115","line":96,"column":3,"nodeType":"103","endLine":96,"endColumn":12,"suggestions":"116"},{"ruleId":"117","severity":1,"message":"118","line":1,"column":16,"nodeType":"103","messageId":"119","endLine":1,"endColumn":25},{"ruleId":"97","replacedBy":"120"},{"ruleId":"99","replacedBy":"121"},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setAutoLoginStarted'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [cachedCredential, props, loginButtonClick, autoLoginStarted] as a second argument to the useEffect Hook.","Identifier",["124"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["125"],["126"],"React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["127"],["128"],"React Hook useEffect has missing dependencies: 'fetchLikedSells' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["129"],["130"],"React Hook useEffect contains a call to 'setHits'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [search] as a second argument to the useEffect Hook.",["131"],"no-unused-vars","'useEffect' is defined but never used.","unusedVar",["122"],["123"],"no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"136","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},"Add dependencies array: [cachedCredential, props, loginButtonClick, autoLoginStarted]",{"range":"147","text":"148"},"Update the dependencies array to be: [props, props.user]",{"range":"149","text":"150"},"Update the dependencies array to be: [props]",{"range":"151","text":"152"},"Update the dependencies array to be: [createButtonClicked, alertOkClicked, props.history]",{"range":"153","text":"154"},{"range":"155","text":"152"},"Update the dependencies array to be: [currentTab, fetchLikedSells, props]",{"range":"156","text":"157"},"Update the dependencies array to be: [props, search]",{"range":"158","text":"159"},"Add dependencies array: [search]",{"range":"160","text":"161"},[3337,3337],", [cachedCredential, props, loginButtonClick, autoLoginStarted]",[3556,3570],"[props, props.user]",[4134,4136],"[props]",[4834,4872],"[createButtonClicked, alertOkClicked, props.history]",[4175,4177],[4389,4403],"[currentTab, fetchLikedSells, props]",[2832,2840],"[props, search]",[2927,2927],", [search]"]