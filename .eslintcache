[{"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\index.js":"1","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\App.js":"2","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\ReduxStore\\reducer.js":"3","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\NavBar\\NavBar.js":"4","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\MySells\\MySells.js":"5","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\ReduxStore\\actionTypes.js":"6","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\NovaVenda\\NovaVenda.js":"7","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\Firebase\\Firebase.js":"8","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\HomePage\\HomePage.js":"9","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\TextDisplay.js":"10","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Spinner.js":"11","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Button.js":"12","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Snackbar.js":"13","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\ConfirmDialog\\ConfirmDialog.js":"14","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Card\\Card.js":"15","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\BulkImagePreview\\BulkImagePreview.js":"16","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\Algolia\\Algolia.js":"17","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\DisplayOtherSells\\DisplayOtherSells.js":"18","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\CustomPersonalization.js":"19","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\AlgoliaSearch\\AlgoliaSearch.js":"20","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\BoxList\\BoxList.js":"21"},{"size":760,"mtime":1609150802159,"results":"22","hashOfConfig":"23"},{"size":840,"mtime":1609171146038,"results":"24","hashOfConfig":"23"},{"size":5688,"mtime":1610733587374,"results":"25","hashOfConfig":"23"},{"size":1700,"mtime":1610379052319,"results":"26","hashOfConfig":"23"},{"size":7912,"mtime":1610472933784,"results":"27","hashOfConfig":"23"},{"size":704,"mtime":1610368037015,"results":"28","hashOfConfig":"23"},{"size":8302,"mtime":1610474854795,"results":"29","hashOfConfig":"23"},{"size":7810,"mtime":1610466098338,"results":"30","hashOfConfig":"23"},{"size":7769,"mtime":1610734027207,"results":"31","hashOfConfig":"23"},{"size":467,"mtime":1610368037031,"results":"32","hashOfConfig":"23"},{"size":217,"mtime":1610368037029,"results":"33","hashOfConfig":"23"},{"size":369,"mtime":1609151607210,"results":"34","hashOfConfig":"23"},{"size":470,"mtime":1610368037026,"results":"35","hashOfConfig":"23"},{"size":1713,"mtime":1610368037024,"results":"36","hashOfConfig":"23"},{"size":6738,"mtime":1610735782072,"results":"37","hashOfConfig":"23"},{"size":1576,"mtime":1610446838489,"results":"38","hashOfConfig":"23"},{"size":741,"mtime":1610468893753,"results":"39","hashOfConfig":"23"},{"size":1692,"mtime":1610733193927,"results":"40","hashOfConfig":"23"},{"size":6092,"mtime":1610736040885,"results":"41","hashOfConfig":"23"},{"size":4513,"mtime":1610644201639,"results":"42","hashOfConfig":"23"},{"size":986,"mtime":1610730864978,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1whupi1",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\index.js",[],["91","92"],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\App.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\ReduxStore\\reducer.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\NavBar\\NavBar.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\MySells\\MySells.js",["93","94"],"import React, { useState, useEffect } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as ReducerAPI from '../ReduxStore/reducer';\r\nimport * as actionTypes from '../ReduxStore/actionTypes';\r\nimport './MySells.scss';\r\nimport Spinner from '../UI/Spinner';\r\nimport Card from '../UI/Card/Card';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport ConfirmDialog from '../UI/ConfirmDialog/ConfirmDialog';\r\nimport TextDisplay from '../UI/TextDisplay';\r\nimport SnackBar from '../UI/Snackbar';\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation';\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\nconst MySells = props => {\r\n\r\n    const [ showComplete, setShowComplete ] = useState(false);\r\n    \r\n    const [ currentTab, setCurrentTab ] = useState(0);\r\n\r\n    const [ showDeleteConfirmDialog, setShowDeleteConfirmDialog ] = useState( false );\r\n\r\n    const [ showUpdateConfirmDialog, setShowUpdateConfirmDialog ] = useState( false );\r\n\r\n    const [ docIdToDelete, setDocIdToDelete ] = useState( null );\r\n\r\n    const [ docIdToUpdate, setDocIdToUpdate ] = useState( null );\r\n\r\n    const [ showSnackBar, setShowSnackBar ] = useState( { message: null, show: false } );\r\n\r\n    const confirmDeleteCurrentEntry = docId => { \r\n        setDocIdToDelete( docId );\r\n        setShowDeleteConfirmDialog( true );\r\n    }\r\n\r\n    const deleteCurrentEntry = value => {\r\n        if ( value ) { \r\n            props.deleteSell(docIdToDelete, props.sells);\r\n            setShowSnackBar( {\r\n                message: 'Venda apagada!',\r\n                show: true\r\n            });\r\n        }\r\n        setDocIdToDelete( null );\r\n        setShowDeleteConfirmDialog( false );\r\n    }\r\n\r\n    const confirmUpdateDocData = docId => {\r\n        setDocIdToUpdate( docId );\r\n        setShowUpdateConfirmDialog( true );\r\n    }\r\n\r\n    const updateDocData = value => {\r\n        if ( value ) {\r\n            let data = {...props.sells[ docIdToUpdate ]};\r\n            data[\"complete\"] = \"true\";\r\n            data[\"completionDate\"] = new Date().toISOString().slice(0, 10);\r\n            props.updateData( docIdToUpdate, data );\r\n            setShowSnackBar( {\r\n                message: 'A venda foi completa!',\r\n                show: true\r\n            });\r\n        }\r\n        setDocIdToUpdate( null );\r\n        setShowUpdateConfirmDialog( false );\r\n    }\r\n\r\n    const generateSellDisplays = sells => (\r\n        <div className=\"sells-content\"> \r\n            { Object.keys(sells).map( key => {\r\n                if ( sells[key].complete === 'true' && !showComplete ) return null;\r\n                return <Card key={sells[key].docId} docData={sells[key]} value={sells[key].docId}\r\n                                                        canDelete={confirmDeleteCurrentEntry}\r\n                                                        completeSell={confirmUpdateDocData}\r\n                                                        location={props.location.pathname}/>\r\n                }\r\n            ) }\r\n        </div>\r\n    );\r\n\r\n    const displayedCardNumber = sells => {\r\n        if ( !sells || ( Object.keys(sells).length === 0 && sells.constructor === Object ) ) return 0;\r\n        return Object.keys(sells).reduce( (acc, sell) => {\r\n            if ( sells[sell].complete === 'true' && !showComplete ) return acc;\r\n            return acc + 1;\r\n        }, 0 )\r\n    }\r\n\r\n    const fetchLikedSells = () => {\r\n        props.startFetch();\r\n        props.getLikedSells( props.userLikes );\r\n    }\r\n\r\n    const generateLikedSells = sells => (\r\n        <div className=\"sells-content\"> \r\n            { Object.keys(sells).map( key =>  <Card key={sells[key].docId} docData={sells[key]} value={sells[key].docId}/>) }\r\n        </div>\r\n    );\r\n\r\n    const handleSnackbarClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n    \r\n        setShowSnackBar( false );\r\n      };\r\n\r\n    useEffect( () => {\r\n        if ( props.searching ) props.toggleSearch();\r\n    }, [] )\r\n\r\n    useEffect( () => {\r\n        if ( currentTab === 0) {\r\n            props.startFetch();\r\n            props.getSellsData(props.user.id);\r\n            return;\r\n        }\r\n        fetchLikedSells();\r\n    }, [ currentTab ] )\r\n\r\n    return (\r\n        <div className=\"my-sells\">\r\n            <div className=\"heading-display\">\r\n                { !props.fetchDone ? <Spinner /> : null }\r\n                <div className=\"text-and-switch\">\r\n                    <BottomNavigation\r\n                        value={currentTab}\r\n                        onChange={(event, newValue) => {\r\n                            setCurrentTab(newValue);\r\n                        }}\r\n                        showLabels\r\n                        className=\"mobile-nav\"\r\n                        >\r\n                        <BottomNavigationAction label=\"Minhas publicações\" icon={<FolderIcon fontSize=\"large\"/> } />\r\n                        <BottomNavigationAction label=\"Favoritos\" icon={<FavoriteIcon fontSize=\"large\"/>} />\r\n                    </BottomNavigation>\r\n                    { currentTab === 0 && displayedCardNumber( props.sells ) !== 0 ? <div className=\"toggle-complete-sells\">\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Switch\r\n                                onChange={ () => setShowComplete( !showComplete ) }\r\n                                color=\"primary\"\r\n                            />\r\n                        }\r\n                        label=\"Completas\"\r\n                        className=\"switch-completas\"\r\n                    />\r\n                    </div>\r\n                    : null }\r\n                </div>\r\n                { displayedCardNumber( props.sells ) === 0 && currentTab === 0 ? <TextDisplay text=\"Não criou nenhuma publicação\" headingType=\"h6\" className=\"no-data-text-display\"/> \r\n                : displayedCardNumber( props.likedSells ) === 0 && currentTab === 1 ? <TextDisplay text=\"Não gostou de nenhuma publicação\" headingType=\"h6\" className=\"no-data-text-display\"/> : null  }\r\n            </div>\r\n            {  props.sells && props.fetchDone && currentTab === 0 ? generateSellDisplays(props.sells) : null}\r\n            {  props.likedSells && props.fetchDone && currentTab === 1 ? generateLikedSells(props.likedSells) : null}\r\n            <ConfirmDialog open={showDeleteConfirmDialog} onClose={ () => setShowDeleteConfirmDialog( false ) } click={deleteCurrentEntry} title=\"Apagar venda?\"/>\r\n            <ConfirmDialog open={showUpdateConfirmDialog} onClose={ () => setShowUpdateConfirmDialog( false ) } click={updateDocData} title=\"Completar venda?\"/>\r\n            <SnackBar open={showSnackBar.show} closeSnackbar={ handleSnackbarClose } message={showSnackBar.message} className=\"snackbar-my-sells\"/>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.user,\r\n        sells: state.userSells,\r\n        fetchDone: state.fetchDone,\r\n        userLikes: state.userLikes,\r\n        likedSells: state.likedSells,\r\n        searching: state.searching\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        startFetch: () => dispatch({type:actionTypes.START_FETCH}),\r\n        getSellsData: (userId) => dispatch(ReducerAPI.getUserSells(userId)),\r\n        deleteSell: (docId, sells) => dispatch(ReducerAPI.deleteSell(docId, sells)),\r\n        updateData: ( docId, data)  => dispatch(ReducerAPI.updateDocData( docId, data ) ),\r\n        getLikedSells: ( likeList ) => dispatch( ReducerAPI.fetchOtherSells( null, null, likeList ) ),\r\n        toggleSearch: () => dispatch( {type: actionTypes.TOGGLE_SEARCH} )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MySells);","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\ReduxStore\\actionTypes.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\NovaVenda\\NovaVenda.js",["95","96"],"import React, {useState, useEffect, useRef } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport './NovaVenda.scss';\r\nimport CustomButton from '../UI/Button';\r\nimport * as reducerAPI from '..//ReduxStore/reducer';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport {connect} from 'react-redux';\r\nimport ImagePreview from '../UI/BulkImagePreview/BulkImagePreview';\r\nimport Spinner from '../UI/Spinner';\r\nimport TextDisplay from '../UI/TextDisplay';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\r\nimport Button from '@material-ui/core/Button';\r\nimport ConfirmDialog from '../UI/ConfirmDialog/ConfirmDialog';\r\nimport * as actionTypes from '../ReduxStore/actionTypes';\r\n\r\nconst NovaVenda = props => {\r\n\r\n    const [input, setInput] = useState({\r\n                            title: \"\",\r\n                            description: \"\",\r\n                            price: \"\",\r\n                            images: null,\r\n                            phone_number: \"\",\r\n                            email: props.email,\r\n                            date: new Date().toISOString().slice(0, 10),\r\n                            profile_photo: props.photo,\r\n                            owner: props.userName,\r\n                            complete: \"false\",\r\n                            likeCount: 0,\r\n                            userId: props.userId\r\n                            });\r\n    \r\n    // images for preview\r\n    const [images, setImages] = useState(null);                        \r\n\r\n    const [createButtonClicked, setCreateButtonClicked] = useState( false );\r\n\r\n    const [ alertDialogSettings, setAlertDialogSettings ] = useState( {\r\n        title: null,\r\n        description: null,\r\n        show: false,\r\n        disableBackdrop: false\r\n    });\r\n\r\n    const [ alertOkClicked, setAlertOkClicked ] = useState( false );\r\n\r\n    const fileInputRef = useRef();\r\n\r\n    const postNewSell = () => {\r\n        var data = input;\r\n        if (data.price <= 0 || data.images === null) {\r\n            if (data.title === \"\") { \r\n                setAlertDialogSettings( {\r\n                    title: \"Adicione um título!\",\r\n                    description: null,\r\n                    show: true\r\n                })\r\n                return; \r\n            }\r\n            if (data.price <= 0) { \r\n                setAlertDialogSettings( {\r\n                    title: \"Preço não é válido!\",\r\n                    description: \"O preço tem de ser superior a 0.\",\r\n                    show: true\r\n                })\r\n                return; \r\n            }\r\n            if (data.images === null) { \r\n                setAlertDialogSettings( {\r\n                    title: \"Adicione pelo menos uma imagem!\",\r\n                    description: null,\r\n                    show: true\r\n                })\r\n                return; \r\n            }\r\n            setInput({\r\n                ...input,\r\n                price: 0\r\n            })\r\n            return;\r\n        }\r\n        props.uploadNewSell( data) ;\r\n        setCreateButtonClicked( true );\r\n    }\r\n\r\n    const handleImagesChange = ( value, targetValue ) => {\r\n        if ( value.length > 5 ) {\r\n            targetValue = null;\r\n            setAlertDialogSettings( {\r\n                title: \"Só pode adicionar no máximo 5 imagens!\",\r\n                description: null,\r\n                show: true\r\n            })\r\n            fileInputRef.current.value = \"\";\r\n            setImages(null); \r\n            setInput({\r\n                ...input,\r\n                images: null\r\n            });\r\n            return;\r\n        }\r\n        let newImageState = [];\r\n        let images = [];\r\n        for (let image in value) {\r\n            if ( image === 'length' ) break;\r\n            newImageState.push(URL.createObjectURL( value[image]  ) );\r\n            images.push( value[image] );\r\n        }\r\n        setImages(newImageState); \r\n        setInput({\r\n            ...input,\r\n            images: images\r\n        });\r\n    }\r\n\r\n    useEffect( () => {\r\n        if ( props.searching ) props.toggleSearch();\r\n    }, [] )\r\n\r\n    useEffect( () => {\r\n        if (createButtonClicked && props.uploadDone) {\r\n            setAlertDialogSettings( {\r\n                title: \"Troca criada!\",\r\n                description: null,\r\n                show: true,\r\n                disableBackdrop: true\r\n            })\r\n        }\r\n    }, [createButtonClicked, props.uploadDone]);\r\n\r\n    useEffect( () => {\r\n        if ( createButtonClicked && alertOkClicked) props.history.push(\"/\");\r\n        else if ( alertOkClicked ) {\r\n            setAlertDialogSettings( {\r\n                title: null,\r\n                description: null,\r\n                show: false\r\n            })\r\n            setAlertOkClicked( false );\r\n        }\r\n    }, [createButtonClicked, alertOkClicked ] )\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"heading\">\r\n                <TextDisplay text=\"Nova venda\" headingType=\"h5\"/>\r\n            </div>\r\n            <form className=\"new-sell\" noValidate autoComplete=\"off\">\r\n                <TextField id=\"title\" label=\"Titulo da venda\" variant=\"outlined\" className=\"input\" onChange={(event) => setInput({...input,title: event.target.value})}/>\r\n                <TextField id=\"preco\" label=\"Preço\" variant=\"outlined\" className=\"input\" type=\"number\" value={input.price} onChange={(event) => setInput({...input,price: event.target.value})}\r\n                    InputProps={{\r\n                    startAdornment: <InputAdornment position=\"start\">€</InputAdornment>,\r\n                    }}\r\n                />\r\n                <TextField id=\"description\" label=\"Descrição (opcional)\" variant=\"outlined\" className=\"input\" multiline rows={7} onChange={(event) => setInput({...input,description: event.target.value})}/>\r\n                <TextField id=\"phone_number\" label=\"Contacto (opcional)\" variant=\"outlined\" className=\"input\" onChange={(event) => setInput({...input,phone_number: event.target.value})}/>\r\n                <TextField id=\"email\" label=\"Email\" variant=\"outlined\" className=\"input\" onChange={(event) => setInput({...input,email: event.target.value})} value={input.email} />\r\n                \r\n                <input ref={fileInputRef} accept=\"image/*\" id=\"contained-button-file\" type=\"file\" multiple onChange={(event) => handleImagesChange(event.target.files, event.target.value)} />\r\n                <label htmlFor=\"contained-button-file\" className=\"upload-container\">\r\n                    <Button variant=\"contained\" color=\"primary\" component=\"span\" className=\"upload-button\">\r\n                        <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\" className=\"upload-photo-icon\">\r\n                            <PhotoCamera />\r\n                        </IconButton>\r\n                        Upload\r\n                    </Button>\r\n                </label>\r\n                { images ? <ImagePreview bulkImages={images} /> : null }\r\n                { !props.uploadDone ? <Spinner className=\"spinner-my-sells\"/> : <CustomButton color=\"primary\" className=\"new-sell-button\" text=\"Criar\" click={postNewSell}/> }\r\n            </form>\r\n            <ConfirmDialog alert disableEscapeKeyDown={alertDialogSettings.disableBackdrop} disableBackdropClick={alertDialogSettings.disableBackdrop} \r\n                        title={alertDialogSettings.title} description={alertDialogSettings.description} \r\n                        open={alertDialogSettings.show} click={ () => setAlertOkClicked( true ) } \r\n                        onClose={ () => setAlertDialogSettings( {...alertDialogSettings, show: false} ) } />\r\n        </React.Fragment>\r\n    );\r\n}        \r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        userId: state.user.id,\r\n        email: state.user.email,\r\n        photo: state.user.photo,\r\n        userName: state.user.name,\r\n        uploadDone: state.uploadDone,\r\n        searching: state.searching\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        uploadNewSell: data => dispatch( reducerAPI.uploadNewSell( data ) ),\r\n        toggleSearch: () => dispatch( { type: actionTypes.TOGGLE_SEARCH } )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NovaVenda);\r\n","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\Firebase\\Firebase.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\HomePage\\HomePage.js",["97","98","99"],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\TextDisplay.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Spinner.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Button.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Snackbar.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\ConfirmDialog\\ConfirmDialog.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\Card\\Card.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\BulkImagePreview\\BulkImagePreview.js",["100"],"import React, {useEffect, useState} from 'react';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport './BulkImagePreview.css';\r\nimport { connect } from 'react-redux';\r\n\r\nconst BulkImagePreview = props => {                        \r\n    \r\n    const [currentImage, setCurrentImage] = useState(props.bulkImages[0]);     \r\n    \r\n    const [currentIndex, setCurrentIndex] = useState(0);     \r\n    \r\n    const [ imageExpand, setImageExpand] = useState( false );\r\n\r\n    const changeCurrentImage = position => {\r\n        setCurrentImage(props.bulkImages[position]);\r\n        setCurrentIndex(position);\r\n    }\r\n\r\n    const chipForImages = () => {\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"preview-images\">\r\n                    <img alt=\"selected\" className={ imageExpand ? \"img-clicked\" : \"\"} src={currentImage} width=\"200px\" height=\"200px\" id=\"img-to-zoom\" onClick={ () => setImageExpand( !imageExpand ) }/>\r\n                    <div className=\"images-chips\">\r\n                        { props.bulkImages.map( ( value, index ) => <Chip label={index + 1} key={value + index} className={currentIndex === index ? \"selected-chip\" : \"chips\"} onClick={ () => changeCurrentImage(index) }/>) }\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n    \r\n    return props.bulkImages ? chipForImages() : null;\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searching: state.searching,\r\n        userId: state.user.id\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(BulkImagePreview);","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\Algolia\\Algolia.js",[],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\DisplayOtherSells\\DisplayOtherSells.js",["101"],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\CustomPersonalization.js",["102"],"C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\AlgoliaSearch\\AlgoliaSearch.js",["103","104"],"import algoliasearch from 'algoliasearch/lite';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Card from '../Card/Card';\r\nimport { getBulkImageUrl } from '../../Firebase/Firebase';\r\nimport { connect } from 'react-redux';\r\nimport * as actionTypes from '../../ReduxStore/actionTypes';\r\nimport Spinner from '../Spinner';\r\nimport './AlgoliaSearch.css';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\nconst searchClient = algoliasearch(\r\n  'BUC2AFISV8',\r\n  '3347ced814c369f956cf3fa1bc564dd9'\r\n);\r\nconst index = searchClient.initIndex('search-sells');\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: 'auto',\r\n    },\r\n    marginBottom: '20px'\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n    width: '100%'\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%'\r\n  },\r\n}));\r\n\r\nconst fetchCompleteData = async hits => (\r\n  await Promise.all( hits.map( async hit => { \r\n    let completeHitData = hit;\r\n    await getBulkImageUrl( hit.userId, hit.images ).then( response => completeHitData[\"imagesUrl\"] = response ).catch(error => console.error( error ) );\r\n    return completeHitData;\r\n  }) )\r\n)\r\n\r\nexport const performSearch = async ( searchText, filters ) => \r\n      index.search(searchText, { filters: filters } ).then( async ( { hits } ) => {\r\n          const completeHits = await fetchCompleteData( hits ).then( response => response );\r\n          return completeHits; \r\n      } ).catch(error => console.error( error ) );\r\n\r\n\r\nconst AlgoliaSearch = props => {\r\n  const classes = useStyles();\r\n\r\n  const [ hits, setHits ] = useState(null);\r\n\r\n  const [ loading, setLoading ] = useState(false);\r\n\r\n  const [ search, setSearch ] = useState(null);\r\n\r\n\r\n\r\n  useEffect( () => {\r\n      if ( search && search.length >= 3 && search !== '' ) {\r\n        props.toggleSearch( search );\r\n        setLoading( true );\r\n\r\n        performSearch( search, 'complete:false AND NOT userId:' + props.userId ).then( response => \r\n          fetchCompleteData( response ).then( response => {\r\n              setLoading( false );\r\n              setHits( response );\r\n            } ).catch( error => console.error( error ) ) )\r\n          .catch( error => console.error( error ) );\r\n\r\n        return;\r\n      }\r\n      setHits( null );\r\n      if ( props.searching ) props.toggleSearch();\r\n  }, [search]);\r\n\r\n  // hotfix\r\n  useEffect( () => {\r\n    if ( search === '' ) setHits( null );\r\n  });\r\n\r\n    return ( \r\n      <React.Fragment>\r\n        <div className={classes.search + \" search-container\"}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Digite...\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n              onChange={ e => setSearch(e.target.value) }\r\n            />\r\n        </div>\r\n        { loading ? <Spinner /> : null }\r\n        { hits ? \r\n          <div className=\"algo-search-cards\">\r\n            {hits.map( hit => <Card key={ hit.docId } docData={ hit }  value={ hit.docId } /> ) } \r\n          </div>\r\n          : null } \r\n      </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searching: state.searching,\r\n    userId: state.user.id\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    toggleSearch: ( data = null ) => dispatch({type: actionTypes.TOGGLE_SEARCH, data: data})\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(AlgoliaSearch);\r\n","C:\\Users\\fpon\\Documents\\Work\\Mine\\Uni\\cp\\projeto\\trocas-e-vendas-madeira\\src\\UI\\BoxList\\BoxList.js",["105"],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":113,"column":8,"nodeType":"112","endLine":113,"endColumn":10,"suggestions":"113"},{"ruleId":"110","severity":1,"message":"114","line":122,"column":8,"nodeType":"112","endLine":122,"endColumn":22,"suggestions":"115"},{"ruleId":"110","severity":1,"message":"111","line":119,"column":8,"nodeType":"112","endLine":119,"endColumn":10,"suggestions":"116"},{"ruleId":"110","severity":1,"message":"117","line":142,"column":8,"nodeType":"112","endLine":142,"endColumn":46,"suggestions":"118"},{"ruleId":"110","severity":1,"message":"111","line":84,"column":8,"nodeType":"112","endLine":84,"endColumn":64,"suggestions":"119"},{"ruleId":"110","severity":1,"message":"120","line":86,"column":5,"nodeType":"121","endLine":86,"endColumn":14,"suggestions":"122"},{"ruleId":"110","severity":1,"message":"111","line":106,"column":8,"nodeType":"112","endLine":106,"endColumn":22,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":1,"column":16,"nodeType":"121","messageId":"126","endLine":1,"endColumn":25},{"ruleId":"124","severity":1,"message":"125","line":1,"column":27,"nodeType":"121","messageId":"126","endLine":1,"endColumn":36},{"ruleId":"124","severity":1,"message":"127","line":127,"column":11,"nodeType":"121","messageId":"126","endLine":127,"endColumn":24},{"ruleId":"110","severity":1,"message":"111","line":103,"column":6,"nodeType":"112","endLine":103,"endColumn":14,"suggestions":"128"},{"ruleId":"110","severity":1,"message":"129","line":106,"column":3,"nodeType":"121","endLine":106,"endColumn":12,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":12,"column":41,"nodeType":"133","messageId":"134","endLine":12,"endColumn":48},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["137"],"React Hook useEffect has missing dependencies: 'fetchLikedSells' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["138"],["139"],"React Hook useEffect has a missing dependency: 'props.history'. Either include it or remove the dependency array.",["140"],["141"],"React Hook useEffect contains a call to 'setAutoLoginStarted'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [cachedCredential, props, loginButtonClick, autoLoginStarted] as a second argument to the useEffect Hook.","Identifier",["142"],["143"],"no-unused-vars","'useEffect' is defined but never used.","unusedVar","'negatedFilter' is assigned a value but never used.",["144"],"React Hook useEffect contains a call to 'setHits'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [search] as a second argument to the useEffect Hook.",["145"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","no-global-assign","no-unsafe-negation",{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"146","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},"Update the dependencies array to be: [props]",{"range":"163","text":"164"},"Update the dependencies array to be: [currentTab, fetchLikedSells, props]",{"range":"165","text":"166"},{"range":"167","text":"164"},"Update the dependencies array to be: [createButtonClicked, alertOkClicked, props.history]",{"range":"168","text":"169"},"Update the dependencies array to be: [props.user, props.likeList, fetchWithPersonalization, props]",{"range":"170","text":"171"},"Add dependencies array: [cachedCredential, props, loginButtonClick, autoLoginStarted]",{"range":"172","text":"173"},"Update the dependencies array to be: [props, props.user]",{"range":"174","text":"175"},"Update the dependencies array to be: [props, search]",{"range":"176","text":"177"},"Add dependencies array: [search]",{"range":"178","text":"179"},[4175,4177],"[props]",[4389,4403],"[currentTab, fetchLikedSells, props]",[4134,4136],[4834,4872],"[createButtonClicked, alertOkClicked, props.history]",[3510,3566],"[props.user, props.likeList, fetchWithPersonalization, props]",[4196,4196],", [cachedCredential, props, loginButtonClick, autoLoginStarted]",[4368,4382],"[props, props.user]",[3231,3239],"[props, search]",[3326,3326],", [search]"]